!!org.camunda.bpm.swagger.docs.model.DtoDocumentation
dtoDocumentation:
  org.camunda.bpm.engine.rest.history.HistoricBatchRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic batches that fulfill given parameters. Parameters may be
        the properties of batches, such as the id or type. The
        size of the result set can be retrieved by using the Get Historic Batch Count
        relref "reference/rest/history/batch/get-query-count.md" >}}) method.
      method: GET
      path: /history/batch
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Queries for historic batches that fulfill given parameters. Parameters may be
        the properties of batches, such as the id or type. The
        size of the result set can be retrieved by using the Get Historic Batch Count
        relref "reference/rest/history/batch/get-query-count.md" >}}) method.
  org.camunda.bpm.engine.rest.sub.repository.CaseDefinitionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id002
      description: Retrieves a case definition according to the `CaseDefinition` interface in the engine.
      method: GET
      path: /case-definition/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Case definition with given id or key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a case definition according to the `CaseDefinition` interface in the engine.
  org.camunda.bpm.engine.rest.dto.history.HistoricCaseInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id083
      description: Retrieves a case instance by id, according to the `CaseInstance` interface in the engine.
      method: GET
      path: /case-instance/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Case instance with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a case instance by id, according to the `CaseInstance` interface in the engine.
  org.camunda.bpm.engine.rest.dto.migration.MigrationPlanReportDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id001
      description: |-
        Validates a migration plan statically without executing it. This
        corresponds to the creation time validation
        guide.
      method: POST
      path: /migration/validate
      pathParameters: {}
      queryParameters: {}
      requestBody:
        instructions: {description: 'A list of migration instructions which map equal
            activities. Each migration instruction is a JSON object with the following
            properties: Name Value Description sourceActivityIds Array The activity
            ids from the source process definition being mapped. targetActivityIds
            Array The activity ids from the target process definition being mapped.
            updateEventTrigger Boolean Configuration flag whether event triggers defined
            are going to be updated during migration.', id: instructions, required: null,
          type: null}
        targetActivityIds: {description: Array, id: targetActivityIds, required: null,
          type: null}
        sourceActivityIds: {description: Array, id: sourceActivityIds, required: null,
          type: null}
        updateEventTrigger: {description: Boolean, id: updateEventTrigger, required: null,
          type: null}
      responseCodes: {}
      resultDescription: |-
        Validates a migration plan statically without executing it. This
        corresponds to the creation time validation
        guide.
  org.camunda.bpm.engine.rest.sub.history.HistoricVariableInstanceResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id008
      description: Retrieves a variable by id.
      method: GET
      path: /variable-instance/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Variable with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a variable by id.
  org.camunda.bpm.engine.rest.history.HistoricActivityStatisticsRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Retrieves historic statistics of a given process definition, grouped by activities.
        These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token).

        Note: This only includes historic data.
      method: GET
      path: /history/process-definition/{id}/statistics
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Returned if some of the query parameters are invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: |-
        Retrieves historic statistics of a given process definition, grouped by activities.
        These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token).

        Note: This only includes historic data.
  org.camunda.bpm.engine.rest.dto.migration.MigrationPlanDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id074
      description: |-
        Generates a migration plan for two process definitions. The generated migration
        plan contains migration instructions which map equal activities between the
        two process definitions.
      method: POST
      path: /migration/generate
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Generates a migration plan for two process definitions. The generated migration
        plan contains migration instructions which map equal activities between the
        two process definitions.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id001
  org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id093
      description: Retrieves a process definition according to the `ProcessDefinition` interface in the engine.
      method: GET
      path: /process-definition/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Process definition with given id or key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a process definition according to the `ProcessDefinition` interface in the engine.
  org.camunda.bpm.engine.rest.dto.task.CompleteTaskDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id026
      description: 'Completes a task and updates process variables using a form submit.
        There are two difference between this method and the `complete` method:'
      method: POST
      path: /task/{id}/submit-form
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: 'Completes a task and updates process variables using a form
        submit. There are two difference between this method and the `complete` method:'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id027
      description: Resolves a task and updates execution variables.
      method: POST
      path: /task/{id}/resolve
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Resolves a task and updates execution variables.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id030
      description: Completes a task and updates process variables.
      method: POST
      path: /task/{id}/complete
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Completes a task and updates process variables.
  org.camunda.bpm.engine.rest.sub.task.TaskCommentResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Gets the comments for a task by id.
      method: GET
      path: /task/{id}/comment
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: No task exists for the given task id. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Gets the comments for a task by id.
  org.camunda.bpm.engine.rest.dto.task.FormDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine.
        This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
      method: GET
      path: /task/{id}/form
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Task with given id does not exist. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: |-
        Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine.
        This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.
      method: GET
      path: /process-definition/{id}/startForm
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Process definition has no start form defined. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '404': {description: Process definition with given key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.
  org.camunda.bpm.engine.rest.dto.history.DeleteHistoricProcessInstancesDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id014
      description: Deletes multiple process instances asynchronously (batch).
      method: POST
      path: /process-instance/delete
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            i.e., neither processInstanceIds, nor processInstanceQuery is present.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: null
  org.camunda.bpm.engine.rest.dto.task.IdentityLinkDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id028
      description: Removes an identity link from a task by id.
      method: POST
      path: /task/{id}/identity-links/delete
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Task with given id does not exist. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Removes an identity link from a task by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id029
      description: Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
      method: POST
      path: /task/{id}/identity-links
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Task with given id does not exist. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
  org.camunda.bpm.engine.rest.dto.history.batch.HistoricBatchDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id005
      description: Retrieves a batch by id, according to the `Batch` interface in the engine.
      method: GET
      path: /batch/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves a batch by id, according to the `Batch` interface in the engine.
  org.camunda.bpm.engine.rest.sub.repository.DeploymentResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id079
      description: Retrieves a deployment by id, according to the `Deployment` interface of the engine.
      method: GET
      path: /deployment/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Deployment with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a deployment by id, according to the `Deployment` interface of the engine.
  org.camunda.bpm.engine.rest.dto.repository.DecisionDefinitionDiagramDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the DMN XML of a decision definition.
      method: GET
      path: /decision-definition/{id}/xml
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves the DMN XML of a decision definition.
  org.camunda.bpm.engine.rest.dto.runtime.JobSuspensionStateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id050
      description: Activates or suspends jobs with the given job definition id.
      method: PUT
      path: /job/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'Returned if some of the request parameters are invalid,
            for example if the jobDefinitionId parameter is null. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends jobs with the given job definition id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id053
      description: Activates or suspends a given job by id.
      method: PUT
      path: /job/{id}/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends a given job by id.
  org.camunda.bpm.engine.rest.dto.repository.CaseDefinitionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id002
  org.camunda.bpm.engine.rest.dto.runtime.RestartProcessInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id042
      description: |-
        Restarts process instances that were canceled or terminated synchronously. To execute the restart asynchronously,
        use the Restart Process Instance Async
      method: POST
      path: /process-definition/{id}/restart
      pathParameters: {}
      queryParameters: {}
      requestBody:
        instructions: {description: 'A JSON array of modification instructions. The
            instructions are executed in the order they are in. An instruction may
            have the following properties: type Mandatory. One of the following values:
            startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity
            instruction requests to enter a given activity. A startAfterActivity instruction
            requests to execute the single outgoing sequence flow of a given activity.
            A startTransition instruction requests to execute a specific sequence
            flow. activityId Can be used with instructions of types startBeforeActivity
            and startAfterActivity. Specifies the activity the instruction targets.
            transitionId Can be used with instructions of types startTransition. Specifies
            the sequence flow to start.', id: instructions, required: null, type: null}
      responseCodes: {}
      resultDescription: |-
        Restarts process instances that were canceled or terminated synchronously. To execute the restart asynchronously,
        use the Restart Process Instance Async
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id016
      description: |-
        Restarts process instances that were canceled or terminated asynchronously. To execute the restart synchronously,
        use the Restart Process Instance
      method: POST
      path: /process-definition/{id}/restart-async
      pathParameters: {}
      queryParameters: {}
      requestBody:
        instructions: {description: 'A JSON array of modification instructions. The
            instructions are executed in the order they are in. An instruction may
            have the following properties: type Mandatory. One of the following values:
            startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity
            instruction requests to enter a given activity. A startAfterActivity instruction
            requests to execute the single outgoing sequence flow of a given activity.
            A startTransition instruction requests to execute a specific sequence
            flow. activityId Can be used with instructions of types startBeforeActivity
            and startAfterActivity. Specifies the activity the instruction targets.
            transitionId Can be used with instructions of types startTransition. Specifies
            the sequence flow to start.', id: instructions, required: null, type: null}
      responseCodes: {}
      resultDescription: |-
        Restarts process instances that were canceled or terminated asynchronously. To execute the restart synchronously,
        use the Restart Process Instance
  org.camunda.bpm.engine.rest.dto.runtime.JobDefinitionPriorityDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id046
      description: Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definition's existing jobs are updated accordingly. The priority can be reset by setting it to null, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the user guide on job prioritization
      method: PUT
      path: /job-definition/{id}/jobPriority
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The retries could not be set successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Job definition with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definition's existing jobs are updated accordingly. The priority can be reset by setting it to null, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the user guide on job prioritization
  org.camunda.bpm.engine.rest.sub.runtime.ProcessInstanceResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id007
      description: Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
      method: GET
      path: /process-instance/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Process instance with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
  org.camunda.bpm.engine.rest.dto.task.TaskDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id031
      description: Creates a new task.
      method: POST
      path: /task/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        owner: {description: The owner of the task., id: owner, required: null, type: String}
        delegationState: {description: The delegation state of the task. Corresponds to the DelegationState enum in the engine. Possible values are RESOLVED and PENDING.,
          id: delegationState, required: null, type: String}
        followUp: {description: 'The follow-up date for the task. Format yyyy-MM-dd''T''HH:mm:ss.',
          id: followUp, required: null, type: String}
        due: {description: 'The due date for the task. Format yyyy-MM-dd''T''HH:mm:ss.',
          id: due, required: null, type: String}
        parentTaskId: {description: 'The id of the parent task, if this task is a
            subtask.', id: parentTaskId, required: null, type: String}
        caseInstanceId: {description: The id of the case instance the task belongs to.,
          id: caseInstanceId, required: null, type: String}
        name: {description: The task name., id: name, required: null, type: String}
        tenantId: {description: The id of the tenant the task belongs to., id: tenantId,
          required: null, type: String}
        description: {description: The task description., id: description, required: null,
          type: String}
        id: {description: The id of the task., id: id, required: null, type: String}
        assignee: {description: The user to assign to this task., id: assignee, required: null,
          type: String}
        priority: {description: The priority of the task., id: priority, required: null,
          type: Number}
      responseCodes:
        '400': {description: Returned if a not valid delegationState is supplied. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Creates a new task.
  org.camunda.bpm.engine.rest.history.HistoricJobLogRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic job logs that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Job Log Count
      method: GET
      path: /history/job-log
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic job logs that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Job Log Count
  org.camunda.bpm.engine.rest.dto.identity.TenantDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id061
      description: Updates a given tenant.
      method: PUT
      path: /tenant/{id}
      pathParameters:
        id: {description: The id of the tenant., id: id, required: null, type: String}
      queryParameters: {}
      requestBody:
        name: {description: The name of the tenant., id: name, required: null, type: String}
        id: {description: The id of the tenant., id: id, required: null, type: String}
      responseCodes:
        '500': {description: The tenant could not be updated due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
        '404': {description: If the tenant with the requested Id cannot be found.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates a given tenant.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id004
      description: Retrieves a tenant.
      method: GET
      path: /tenant/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Tenant with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a tenant.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id062
      description: Create a new tenant.
      method: POST
      path: /tenant/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        name: {description: The name of the tenant., id: name, required: null, type: String}
        id: {description: The id of the tenant., id: id, required: null, type: String}
      responseCodes:
        '500': {description: The tenant could not be created due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
      resultDescription: Create a new tenant.
  org.camunda.bpm.engine.rest.dto.task.TaskQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id023
      description: |-
        Queries for tasks that fulfill a given filter.
        This method is slightly more powerful than the Get Tasks
        filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.
        The size of the result set can be retrieved by using the Get Task Count (POST)
      method: POST
      path: /task
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for tasks that fulfill a given filter.
        This method is slightly more powerful than the Get Tasks
        filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.
        The size of the result set can be retrieved by using the Get Task Count (POST)
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id022
      description: |-
        Retrieves the number of tasks that fulfill the given filter.
        Corresponds to the size of the result set of the Get Tasks (POST)
      method: POST
      path: /task/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Returned if some of the query parameters are invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: |-
        Retrieves the number of tasks that fulfill the given filter.
        Corresponds to the size of the result set of the Get Tasks (POST)
  org.camunda.bpm.engine.rest.sub.authorization.AuthorizationResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id020
      description: Retrieves an authorization by id.
      method: GET
      path: /authorization/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Authorization with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves an authorization by id.
  org.camunda.bpm.engine.rest.dto.runtime.FilterDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id003
      description: Creates a new filter.
      method: POST
      path: /filter/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        owner: {description: The user id of the owner of the filter., id: owner, required: null,
          type: String}
        query: {description: 'A JSON object which corresponds to the JSON body of
            a REST query. I.e., a filter which has the resourceType Task must contain
            a query which is a valid task query (see Task).', id: query, required: null,
          type: Object}
        name: {description: The name of the filter., id: name, required: null, type: String}
        properties: {description: A JSON object containing various properties of the filter. The properties are user defined and no required properties exist. Properties can be used to save the priority or the description of a filter.,
          id: properties, required: null, type: Object}
        resourceType: {description: 'The resource type of the filter, e.g., Task',
          id: resourceType, required: null, type: String}
      responseCodes: {}
      resultDescription: Creates a new filter.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id003
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id036
      description: Updates an existing filter.
      method: PUT
      path: /filter/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody:
        owner: {description: The user id of the owner of the filter., id: owner, required: null,
          type: String}
        query: {description: 'A JSON object which corresponds to the JSON body of
            a REST query. I.e., a filter which has the resourceType Task must contain
            a query which is a valid task query (see Task).', id: query, required: null,
          type: Object}
        name: {description: The name of the filter., id: name, required: null, type: String}
        properties: {description: A JSON object containing various properties of the filter. The properties are user defined and no required properties exist. Properties can be used to save the priority or the description of a filter.,
          id: properties, required: null, type: Object}
        resourceType: {description: 'The resource type of the filter, e.g., Task',
          id: resourceType, required: null, type: String}
      responseCodes:
        '400': {description: Filter was invalid. See Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The authenticated user is unauthorized to update this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter cannot be found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates an existing filter.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id006
      description: Retrieves a single filter by id, according to the `Filter` interface in the engine.
      method: GET
      path: /filter/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a single filter by id, according to the `Filter` interface in the engine.
  org.camunda.bpm.engine.rest.dto.ModificationDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id015
      description: |-
        Executes a modification asynchronously for multiple process instances. To execute a modification synchronously,
        use the Execute Modification
      method: POST
      path: /modification/executeAsync
      pathParameters: {}
      queryParameters: {}
      requestBody:
        instructions: {description: 'A JSON array of modification instructions. The
            instructions are executed in the order they are in. An instruction may
            have the following properties: type Mandatory. One of the following values:
            cancel, startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity
            and cancel instructions request to enter a given activity. A startAfterActivity
            instruction requests to execute the single outgoing sequence flow of a
            given activity. A startTransition instruction requests to execute a specific
            sequence flow. activityId Can be used with instructions of types startBeforeActivity,
            startAfterActivity, and cancel. Specifies the activity the instruction
            targets. transitionId Can be used with instructions of types startTransition.
            Specifies the sequence flow to start.', id: instructions, required: null,
          type: null}
      responseCodes: {}
      resultDescription: |-
        Executes a modification asynchronously for multiple process instances. To execute a modification synchronously,
        use the Execute Modification
  org.camunda.bpm.engine.rest.sub.identity.TenantResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id004
  org.camunda.bpm.engine.rest.dto.repository.DeploymentResourceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves a deployment resource by resource id for the given deployment.
      method: GET
      path: /deployment/{id}/resources/{resourceId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/octet-stream}
        '404': {description: Deployment Resource with given resource id or deployment id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a deployment resource by resource id for the given deployment.
  org.camunda.bpm.engine.rest.dto.HistoryTimeToLiveDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id043
      description: Updates history time to live for process definition. The field is used within History cleanup
      method: PUT
      path: /process-definition/{id}/history-time-to-live
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if some of the request parameters are invalid.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Process definition with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates history time to live for process definition. The field is used within History cleanup
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id044
      description: Updates history time to live for case definition with given id. The field is used within History cleanup
      method: PUT
      path: /case-definition/{id}/history-time-to-live
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if some of the request parameters are invalid.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: case definition with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates history time to live for case definition with given id. The field is used within History cleanup
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id045
      description: Updates history time to live for decision definition. The field is used within History cleanup
      method: PUT
      path: /decision-definition/{id}/history-time-to-live
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if some of the request parameters are invalid.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Decision definition with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates history time to live for decision definition. The field is used within History cleanup
  org.camunda.bpm.engine.rest.sub.VariableResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables of a given execution by id.
      method: GET
      path: /execution/{id}/localVariables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Execution with given id does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables of a given execution by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables
      method: GET
      path: /task/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Task id is null or does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables of a given task by id.
      method: GET
      path: /task/{id}/localVariables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Task id is null or does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables of a given task by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables of a given case instance by id.
      method: GET
      path: /case-instance/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Case instance with given id does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables of a given case instance by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables of a given process instance by id.
      method: GET
      path: /process-instance/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Process instance with given id does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables of a given process instance by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables of a given case execution.
      method: GET
      path: /case-execution/{id}/localVariables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Case execution with given id does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables of a given case execution.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all variables of a given case execution by id.
      method: GET
      path: /case-execution/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: Case execution with given id does not exist. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: Retrieves all variables of a given case execution by id.
  org.camunda.bpm.engine.rest.dto.runtime.ExecutionTriggerDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id024
      description: Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
      method: POST
      path: /execution/{id}/signal
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id025
      description: Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message's payload.
      method: POST
      path: /execution/{id}/messageSubscriptions/{messageName}/trigger
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: The addressed execution has no pending message subscriptions for the given message. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message's payload.
  org.camunda.bpm.engine.rest.dto.repository.DecisionRequirementsDefinitionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id019
      description: Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.
      method: GET
      path: /decision-requirements-definition/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.
  org.camunda.bpm.engine.rest.dto.history.HistoricCaseInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id011
      description: |-
        Queries for case instances that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Case Instances
        to filter by multiple case variables of types `String`, `Number` or `Boolean`.
      method: POST
      path: /case-instance
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are caseInstanceId, caseDefinitionKey, caseDefinitionId
            and tenantId. sortOrder Mandatory. Sort the results in a given order.
            Values may be asc for ascending order or desc for descending order.',
          id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for case instances that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Case Instances
        to filter by multiple case variables of types `String`, `Number` or `Boolean`.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id010
      description: |-
        Queries for the number of case executions that fulfill the given parameters.
        This method takes the same message body as the Get Case Executions (POST)
        and therefore it is slightly more powerful than the Get Case Execution Count
      method: POST
      path: /case-instance/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if an invalid operator for variable comparison is used. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for the number of case executions that fulfill the given parameters.
        This method takes the same message body as the Get Case Executions (POST)
        and therefore it is slightly more powerful than the Get Case Execution Count
  org.camunda.bpm.engine.rest.dto.repository.DecisionDefinitionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id092
      description: Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
      method: GET
      path: /decision-definition/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
  java.lang.String:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the exception stacktrace corresponding to the passed job id.
      method: GET
      path: /job/{id}/stacktrace
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: text/plain}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the exception stacktrace corresponding to the passed job id.
  org.camunda.bpm.engine.rest.security.auth.AuthenticationResult:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id078
      description: Verifies that user credentials are valid.
      method: POST
      path: /identity/verify
      pathParameters: {}
      queryParameters: {}
      requestBody:
        password: {description: A password of a user., id: password, required: null,
          type: String}
        username: {description: The username of a user., id: username, required: null,
          type: String}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: If body does not contain username or password., id: '400',
          required: null, type: application/json}
      resultDescription: Verifies that user credentials are valid.
  org.camunda.bpm.engine.rest.dto.runtime.CaseExecutionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id100
      description: Retrieves a case execution by id, according to the `CaseExecution` interface in the engine.
      method: GET
      path: /case-execution/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Case execution with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a case execution by id, according to the `CaseExecution` interface in the engine.
  org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionDiagramDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the BPMN 2.0 XML of a process definition.
      method: GET
      path: /process-definition/{id}/xml
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Process definition with given key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the BPMN 2.0 XML of a process definition.
  org.camunda.bpm.engine.rest.history.UserOperationLogRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for user operation log entries that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get User Operation Log Count
      method: GET
      path: /history/user-operation
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for user operation log entries that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get User Operation Log Count
  org.camunda.bpm.engine.rest.dto.runtime.RetriesDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id047
      description: Sets the number of retries of all failed jobs associated with the given job definition id.
      method: PUT
      path: /job-definition/{id}/retries
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The retries could not be set successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Sets the number of retries of all failed jobs associated with the given job definition id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id052
      description: Sets the retries of the job to the given number of retries by id.
      method: PUT
      path: /job/{id}/retries
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The retries could not be set successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Sets the retries of the job to the given number of retries by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id058
      description: Sets the number of retries left to execute an external task by id. If retries are set to 0, an incident is created.
      method: PUT
      path: /external-task/{id}/retries
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'In case the number of retries is negative, an exception
            of type InvalidRequestException is returned. See the Introduction for
            the error response format.', id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Sets the number of retries left to execute an external task by id. If retries are set to 0, an incident is created.
  org.camunda.bpm.engine.rest.dto.repository.CaseDefinitionDiagramDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the CMMN XML of a case definition.
      method: GET
      path: /case-definition/{id}/xml
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Case definition with given id or key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the CMMN XML of a case definition.
  org.camunda.bpm.engine.rest.sub.history.HistoricBatchResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id005
  org.camunda.bpm.engine.rest.dto.runtime.JobDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Schedules asynchronous history cleanup (See History cleanup
      method: POST
      path: /history/cleanup
      pathParameters: {}
      queryParameters: {}
      requestBody:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Returned if some of the query parameters are invalid.,
          id: '400', required: null, type: application/json}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Returned if some of the query parameters are invalid.,
          id: '400', required: null, type: application/json}
      resultDescription: Schedules asynchronous history cleanup (See History cleanup
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id009
      description: Retrieves a job by id, according to the `Job` interface in the engine.
      method: GET
      path: /job/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a job by id, according to the `Job` interface in the engine.
  org.camunda.bpm.engine.rest.dto.identity.UserCredentialsDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id048
      description: Updates a user's credentials (password).
      method: PUT
      path: /user/{id}/credentials
      pathParameters: {}
      queryParameters: {}
      requestBody:
        password: {description: The user's new password., id: password, required: null,
          type: String}
        authenticatedUserPassword: {description: 'The password of the authenticated
            user who changes the password of the user (i.e., the user with passed
            id as path parameter).', id: authenticatedUserPassword, required: null,
          type: String}
      responseCodes:
        '400': {description: If the authenticated user password does not match., id: '400',
          required: null, type: Empty}
        '500': {description: The user could not be created due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
        '404': {description: If the corresponding user cannot be found, id: '404',
          required: null, type: application/json}
      resultDescription: Updates a user's credentials (password).
  org.camunda.bpm.engine.rest.sub.runtime.FilterResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id006
  org.camunda.bpm.engine.rest.dto.dmn.EvaluateDecisionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id073
      description: Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
      method: POST
      path: /decision-definition/{id}/evaluate
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
  org.camunda.bpm.engine.rest.dto.task.AttachmentDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Creates an attachment for a task.
      method: POST
      path: /task/{id}/attachment/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        attachment-description: {description: The description of the attachment.,
          id: attachment-description, required: null, type: text/plain}
        attachment-type: {description: The type of the attachment., id: attachment-type,
          required: null, type: text/plain}
        attachment-name: {description: The name of the attachment., id: attachment-name,
          required: null, type: text/plain}
        url: {description: The url to the remote content of the attachment., id: url,
          required: null, type: text/plain}
        content: {description: The content of the attachment., id: content, required: null,
          type: text/plain}
      responseCodes: {}
      resultDescription: Creates an attachment for a task.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves a task attachment by task id and attachment id.
      method: GET
      path: /task/{id}/attachment/{attachmentId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: The attachment for given task and attachment id does not exist or the history of the engine is disabled. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a task attachment by task id and attachment id.
  org.camunda.bpm.engine.rest.history.HistoricCaseInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic case instances that fulfill the given parameters.  The size of the result set can
        be retrieved by using the Get Historic Case Instance Count
      method: GET
      path: /history/case-instance
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic case instances that fulfill the given parameters.  The size of the result set can
        be retrieved by using the Get Historic Case Instance Count
  org.camunda.bpm.engine.rest.dto.repository.DeploymentWithDefinitionsDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Creates a deployment.
      method: POST
      path: /deployment/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        deployment-name: {description: The name for the deployment to be created.,
          id: deployment-name, required: null, type: text/plain}
        deployment-source: {description: The source for the deployment to be created.,
          id: deployment-source, required: null, type: text/plain}
        deploy-changed-only: {description: 'A flag indicating whether the process
            engine should perform duplicate checking on a per-resource basis. If set
            to true, only those resources that have actually changed are deployed.
            Checks are made against resources included previous deployments of the
            same name and only against the latest versions of those resources. If
            set to true, the option enable-duplicate-filtering is overridden and set
            to true.', id: deploy-changed-only, required: null, type: text/plain}
        '*': {description: The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment.,
          id: '*', required: null, type: application/octet-stream}
        tenant-id: {description: The tenant id for the deployment to be created.,
          id: tenant-id, required: null, type: text/plain}
        enable-duplicate-filtering: {description: 'A flag indicating whether the process
            engine should perform duplicate checking for the deployment or not. This
            allows you to check if a deployment with the same name and the same resouces
            already exists and if true, not create a new deployment but instead return
            the existing deployment. The default value is false.', id: enable-duplicate-filtering,
          required: null, type: text/plain}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: Creates a deployment.
  org.camunda.bpm.engine.rest.sub.history.HistoricProcessInstanceResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id007
  org.camunda.bpm.engine.rest.dto.history.HistoricVariableInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id008
  org.camunda.bpm.engine.rest.sub.runtime.JobResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id009
  org.camunda.bpm.engine.rest.dto.runtime.JobDuedateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id054
      description: Updates the due date of a job by id.
      method: PUT
      path: /job/{id}/duedate
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The due date could not be set successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates the due date of a job by id.
  org.camunda.bpm.engine.rest.dto.runtime.SetJobRetriesByProcessDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id012
      description: Create a batch to set retries of jobs associated with given processes asynchronously.
      method: POST
      path: /process-instance/job-retries
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if neither processInstanceIds, nor processInstanceQuery is
            present. Or if the retry count is not specified. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: null
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id013
      description: Create a batch to set retries of jobs asynchronously based on a historic process instance query.
      method: POST
      path: /process-instance/job-retries-historic-query-based
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            e. g. if neither processInstances, nor processInstanceQuery is present.
            Or if the retry count is not specified. See the Introduction for the error
            response format.', id: '400', required: null, type: application/json}
      resultDescription: null
  org.camunda.bpm.engine.rest.history.HistoricActivityInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic activity instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Historic Activity Instance Count
      method: GET
      path: /history/activity-instance
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic activity instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Historic Activity Instance Count
  org.camunda.bpm.engine.rest.dto.history.HistoricProcessInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id007
  org.camunda.bpm.engine.rest.history.HistoricVariableInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic variable instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Variable Instance Count
      method: GET
      path: /history/variable-instance
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic variable instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Variable Instance Count
  org.camunda.bpm.engine.rest.dto.runtime.ExecutionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id104
      description: Retrieves an execution by id, according to the `Execution` interface in the engine.
      method: GET
      path: /execution/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Execution with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves an execution by id, according to the `Execution` interface in the engine.
  org.camunda.bpm.engine.rest.dto.runtime.ActivityInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves an Activity Instance (Tree) for a given process instance by id.
      method: GET
      path: /process-instance/{id}/activity-instances
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Process instance with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves an Activity Instance (Tree) for a given process instance by id.
  org.camunda.bpm.engine.rest.dto.runtime.VariableInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id008
  org.camunda.bpm.engine.rest.dto.runtime.CreateCaseInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id098
      description: Instantiates a given case definition. Case variables and business key may be supplied in the request body.
      method: POST
      path: /case-definition/{id}/create
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'The case instance could not be created due to an invalid
            variable value, for example if the value could not be parsed to an Integer
            value or the passed variable type is not supported. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
        '500': {description: The case instance could not be created successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '403': {description: The case execution cannot be instantiated because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case instance could not be created due to a nonexistent case definition. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Instantiates a given case definition. Case variables and business key may be supplied in the request body.
  org.camunda.bpm.engine.rest.dto.SuspensionStateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id055
      description: Activates or suspends a batch by id.
      method: PUT
      path: /batch/{id}/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if the batch cannot be suspended or activated. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends a batch by id.
  org.camunda.bpm.engine.rest.dto.runtime.SetJobRetriesDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id017
      description: Create a batch to set retries of jobs asynchronously.
      method: POST
      path: /job/retries
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if neither processInstanceIds nor processInstanceQuery is
            present. Or if the retry count is not specified. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: null
  org.camunda.bpm.engine.rest.history.HistoricIncidentRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic incidents that fulfill given parameters.
        The size of the result set can be retrieved by using the Get Incident Count
      method: GET
      path: /history/incident
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic incidents that fulfill given parameters.
        The size of the result set can be retrieved by using the Get Incident Count
  org.camunda.bpm.engine.rest.dto.identity.UserDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id049
      description: Create a new user.
      method: POST
      path: /user/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        credentials: {description: 'A JSON object containing variable key-value pairs.
            The object contains the following property: password (String).', id: credentials,
          required: null, type: Array}
        profile: {description: 'A JSON object containing variable key-value pairs.
            The object contains the following properties: id (String), firstName (String),
            lastName (String) and email (String).', id: profile, required: null, type: Array}
      responseCodes:
        '500': {description: The user could not be created due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
      resultDescription: Create a new user.
  org.camunda.bpm.engine.rest.dto.runtime.CaseInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id010
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id011
  org.camunda.bpm.engine.rest.dto.batch.BatchDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id012
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id013
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id108
      description: Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
      method: POST
      path: /process-instance/delete-historic-query-based
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            e. g. neither processInstanceIds, nor historicProcessInstanceQuery is
            present. See the Introduction for the error response format.', id: '400',
          required: null, type: application/json}
      resultDescription: null
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id014
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id015
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id016
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id017
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id005
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id014
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id065
      description: Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
      method: POST
      path: /external-task/retries-async
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'If neither externalTaskIds nor externalTaskQuery are
            present or externalTaskIds contains null value or the number of retries
            is negative, an exception of type InvalidRequestException is returned.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id018
      description: |-
        Executes a migration plan asynchronously (batch) for multiple process instances.
        To execute a migration plan synchronously, use the Execute Migration Plan
      method: POST
      path: /migration/executeAsync
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Executes a migration plan asynchronously (batch) for multiple process instances.
        To execute a migration plan synchronously, use the Execute Migration Plan
  org.camunda.bpm.engine.rest.dto.message.CorrelationMessageDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id075
      description: |-
        Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event.
        Internally this maps to the engine's message correlation builder methods `MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.
        For more information about the correlation behavior, see the Message EventsBPMN 2.0 Implementation Reference
      method: POST
      path: /message
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. The property resultEnabled in the request body was true.,
          id: '200', required: null, type: application/json}
        '400': {description: 'If no messageName was supplied. If both tenantId and
            withoutTenantId are supplied. If the message has not been correlated to
            exactly one entity (execution or process definition), or the variable
            value or type is invalid, for example if the value could not be parsed
            to an Integer value or the passed variable type is not supported. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful. The property resultEnabled in the request body was false (Default).,
          id: '204', required: null, type: ''}
      resultDescription: |-
        Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event.
        Internally this maps to the engine's message correlation builder methods `MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.
        For more information about the correlation behavior, see the Message EventsBPMN 2.0 Implementation Reference
  org.camunda.bpm.engine.rest.dto.runtime.PriorityDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id051
      description: Sets the execution priority of a job by id.
      method: PUT
      path: /job/{id}/priority
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The priority could not be set successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Sets the execution priority of a job by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id057
      description: Sets the priority of an existing external task by id. The default value of a priority is 0.
      method: PUT
      path: /external-task/{id}/priority
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Sets the priority of an existing external task by id. The default value of a priority is 0.
  org.camunda.bpm.engine.rest.dto.runtime.VariableInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id072
      description: |-
        Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the
        Get Variable Instances (POST)Get Variable Instance Count
      method: POST
      path: /variable-instance/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the
        Get Variable Instances (POST)Get Variable Instance Count
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id071
      description: |-
        Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the
        Get Variable Instances`String`, `Number` or `Boolean`.
      method: POST
      path: /variable-instance
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are variableName, variableType, activityInstanceId
            and tenantId. sortOrder Mandatory. Sort the results in a given order.
            Values may be asc for ascending order or desc for descending order.',
          id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the
        Get Variable Instances`String`, `Number` or `Boolean`.
  org.camunda.bpm.engine.rest.dto.migration.MigrationExecutionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id060
      description: |-
        Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously,
        use the Execute Migration Plan Async (Batch)
      method: POST
      path: /migration/execute
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously,
        use the Execute Migration Plan Async (Batch)
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id018
  org.camunda.bpm.engine.rest.sub.repository.DecisionRequirementsDefinitionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id019
  org.camunda.bpm.engine.rest.dto.runtime.CaseExecutionTriggerDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id032
      description: 'Performs a transition from ACTIVE state to TERMINATED state. In
        relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
      method: POST
      path: /case-instance/{id}/terminate
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case instance is not in the active state. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case instance cannot be terminated because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case instance with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: 'Performs a transition from ACTIVE state to TERMINATED state.
        In relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id033
      description: 'Performs a transition from COMPLETED state to CLOSED state. In
        relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
      method: POST
      path: /case-instance/{id}/close
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case instance is active. See the Introduction for
            the error response format.', id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case instance cannot be closed because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case instance with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: 'Performs a transition from COMPLETED state to CLOSED state.
        In relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id034
      description: 'Performs a transition from ACTIVE state to COMPLETED state. In
        relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
      method: POST
      path: /case-instance/{id}/complete
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case instance is already completed. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case instance cannot be completed because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case instance with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: 'Performs a transition from ACTIVE state to COMPLETED state.
        In relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id037
      description: |-
        title: "Complete Case Execution"
        weight: 70
      method: POST
      path: /case-execution/{id}/complete
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case execution is enabled or is already completed.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case execution cannot be completed because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case execution with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: |-
        title: "Complete Case Execution"
        weight: 70
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id038
      description: |-
        title: "Terminate Case Execution"
        weight: 90
      method: POST
      path: /case-execution/{id}/terminate
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case execution is not in the active state. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case execution cannot be terminated because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case execution with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: |-
        title: "Terminate Case Execution"
        weight: 90
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id039
      description: 'Performs a transition from ENABLED state to ACTIVE state. In relation
        to the state transition, it is possible to update or delete case instance
        variables (please note: deletion precedes update).'
      method: POST
      path: /case-execution/{id}/manual-start
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case execution is disabled or is already active.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case execution cannot be started because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case execution with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: 'Performs a transition from ENABLED state to ACTIVE state.
        In relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id040
      description: 'Performs a transition from DISABLED state to ENABLED state. In
        relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
      method: POST
      path: /case-execution/{id}/reenable
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case execution is active or is already enabled. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case execution cannot be reenabled because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case execution with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: 'Performs a transition from DISABLED state to ENABLED state.
        In relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id041
      description: 'Performs a transition from ENABLED state to DISABLED state. In
        relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
      method: POST
      path: /case-execution/{id}/disable
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The state transition is not allowed to be performed,
            for example when the case execution is active or is already disabled.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The case execution cannot be disabled because of CMMN restrictions. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The case execution with given id is not found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: 'Performs a transition from ENABLED state to DISABLED state.
        In relation to the state transition, it is possible to update or delete case
        instance variables (please note: deletion precedes update).'
  org.camunda.bpm.engine.rest.dto.authorization.AuthorizationDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id020
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id035
      description: Updates an authorization by id.
      method: PUT
      path: /authorization/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody:
        resourceId: {description: The resource Id. The value "*" represents an authorization ranging over all instances of a resource.,
          id: resourceId, required: null, type: String}
        permissions: {description: An integer holding the permissions provided by this authorization.,
          id: permissions, required: null, type: Integer}
        groupId: {description: The id of the group this authorization has been created for.,
          id: groupId, required: null, type: String}
        userId: {description: The id of the user this authorization has been created for. The value "*" represents a global authorization ranging over all users.,
          id: userId, required: null, type: String}
        resourceType: {description: An integer representing the resource type. See the User Guide for a list of integer representations of resource types.,
          id: resourceType, required: null, type: Integer}
      responseCodes:
        '500': {description: The authorization could not be updated due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The authenticated user is unauthorized to update this resource. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: The authorization with the requested Id cannot be found.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates an authorization by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id091
      description: Creates a new authorization.
      method: POST
      path: /authorization/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        resourceId: {description: The resource Id. The value "*" represents an authorization ranging over all instances of a resource.,
          id: resourceId, required: null, type: String}
        permissions: {description: An array of Strings holding the permissions provided by this authorization.,
          id: permissions, required: null, type: String}
        groupId: {description: The id of the group this authorization has been created for.,
          id: groupId, required: null, type: String}
        type: {description: 'The type of the authorization. (0=global, 1=grant, 2=revoke).
            See the User Guide for more information about authorization types.', id: type,
          required: null, type: Integer}
        userId: {description: The id of the user this authorization has been created for. The value "*" represents a global authorization ranging over all users.,
          id: userId, required: null, type: String}
        resourceType: {description: An integer representing the resource type. See the User Guide for a list of integer representations of resource types.,
          id: resourceType, required: null, type: Integer}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: The authorization could not be updated due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '403': {description: The authenticated user is unauthorized to create an instance of this resource. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
      resultDescription: Creates a new authorization.
  org.camunda.bpm.engine.rest.dto.task.CommentDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id021
      description: Creates a comment for a task by id.
      method: POST
      path: /task/{id}/comment/create
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: The task does not exist or no comment message was submitted. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '403': {description: The history of the engine is disabled. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
      resultDescription: Creates a comment for a task by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id021
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves a task comment by task id and comment id.
      method: GET
      path: /task/{id}/comment/{commentId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: 'The task or comment with given task and comment id do
            not exist, or the history of the engine is disabled. See the Introduction
            for the error response format.', id: '404', required: null, type: application/json}
      resultDescription: Retrieves a task comment by task id and comment id.
  org.camunda.bpm.engine.rest.dto.history.HistoricTaskInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id022
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id023
  org.camunda.bpm.engine.rest.sub.management.JobDefinitionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id080
      description: Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
      method: GET
      path: /job-definition/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Job definition with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
  void:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id024
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id025
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id084
      description: |-
        Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
      method: POST
      path: /execution/{id}/localVariables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: 'Update or delete could not be executed, for example
            because the execution does not exist.', id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: |-
        Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id094
      description: Creates a new group.
      method: POST
      path: /group/create
      pathParameters: {}
      queryParameters: {}
      requestBody:
        name: {description: The name of the group., id: name, required: null, type: String}
        id: {description: The id of the group., id: id, required: null, type: String}
        type: {description: The type of the group., id: type, required: null, type: String}
      responseCodes:
        '500': {description: The group could not be created due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
      resultDescription: Creates a new group.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Adds a member to a group.
      method: PUT
      path: /group/{id}/members/{userId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: In case an internal error occurs. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
      resultDescription: Adds a member to a group.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Removes a member from a group.
      method: DELETE
      path: /group/{id}/members/{userId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: In case an error occurs. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
      resultDescription: Removes a member from a group.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id096
      description: Updates a given group by id.
      method: PUT
      path: /group/{id}
      pathParameters:
        id: {description: The id of the group., id: id, required: null, type: String}
      queryParameters: {}
      requestBody:
        name: {description: The name of the group., id: name, required: null, type: String}
        id: {description: The id of the group., id: id, required: null, type: String}
        type: {description: The type of the group., id: type, required: null, type: String}
      responseCodes:
        '500': {description: The group could not be updated due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
        '404': {description: If the group with the requested Id cannot be found.,
          id: '404', required: null, type: application/json}
      resultDescription: Updates a given group by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a group by id.
      method: DELETE
      path: /group/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
        '404': {description: Group cannot be found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a group by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id026
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id027
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id028
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id085
      description: |-
        Updates or deletes the variables visible from the task.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables
      method: POST
      path: /task/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Updates or deletes the variables visible from the task.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Removes an attachment from a task by id.
      method: DELETE
      path: /task/{id}/attachment/{attachmentId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The history of the engine is disabled. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Task attachment for given task id and attachment id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Removes an attachment from a task by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id068
      description: Changes the assignee of a task to a specific user.
      method: POST
      path: /task/{id}/assignee
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: Task with given id does not exist or setting the assignee was not successful. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Changes the assignee of a task to a specific user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id086
      description: |-
        Updates or deletes the variables in the context of a task.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
      method: POST
      path: /task/{id}/localVariables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Updates or deletes the variables in the context of a task.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id029
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Resets a task's assignee. If successful, the task is not assigned to a user.
      method: POST
      path: /task/{id}/unclaim
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Task with given id does not exist. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Resets a task's assignee. If successful, the task is not assigned to a user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id069
      description: Delegates a task to another user.
      method: POST
      path: /task/{id}/delegate
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: If the task does not exist or delegation was not successful. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Delegates a task to another user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id030
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id070
      description: Claims a task for a specific user.
      method: POST
      path: /task/{id}/claim
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: Task with given id does not exist or claiming was not successful. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Claims a task for a specific user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id031
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id032
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id087
      description: 'Updates or deletes the variables of a case instance. Please note:
        deletion precedes update.'
      method: POST
      path: /case-instance/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: 'Update or delete could not be executed, for example
            because the case instance does not exist.', id: '500', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: 'Updates or deletes the variables of a case instance. Please
        note: deletion precedes update.'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id033
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id034
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id035
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes an authorization by id.
      method: DELETE
      path: /authorization/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '403': {description: If the authenticated user is unauthorized to delete the resource instance. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Authorization cannot be found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes an authorization by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id036
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a filter by id.
      method: DELETE
      path: /filter/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: The authenticated user is unauthorized to delete this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter cannot be found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a filter by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id066
      description: Activates or suspends a given process instance by id.
      method: PUT
      path: /process-instance/{id}/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends a given process instance by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id088
      description: |-
        Updates or deletes the variables of a process instance by id.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
      method: POST
      path: /process-instance/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: 'Update or delete could not be executed, for example
            because the process instance does not exist.', id: '500', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: |-
        Updates or deletes the variables of a process instance by id.
        Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id077
      description: POST `/process-instance/{id}/modification`
      method: POST
      path: /process-instance/{id}/modification
      pathParameters: {}
      queryParameters: {}
      requestBody:
        instructions: {description: 'A JSON array of modification instructions. The
            instructions are executed in the order they are in. An instruction may
            have the following properties: type Mandatory. One of the following values:
            cancel, startBeforeActivity, startAfterActivity, startTransition. A cancel
            instruction requests cancellation of a single activity instance or all
            instances of one activity. A startBeforeActivity instruction requests
            to enter a given activity. A startAfterActivity instruction requests to
            execute the single outgoing sequence flow of a given activity. A startTransition
            instruction requests to execute a specific sequence flow. activityId Can
            be used with instructions of types startBeforeActivity, startAfterActivity,
            and cancel. Specifies the activity the instruction targets. transitionId
            Can be used with instructions of types startTransition. Specifies the
            sequence flow to start. activityInstanceId Can be used with instructions
            of type cancel. Specifies the activity instance to cancel. Valid values
            are the activity instance IDs supplied by the Get Activity Instance request.
            transitionInstanceId Can be used with instructions of type cancel. Specifies
            the transition instance to cancel. Valid values are the transition instance
            IDs supplied by the Get Activity Instance request. ancestorActivityInstanceId
            Can be used with instructions of type startBeforeActivity, startAfterActivity,
            and startTransition. Valid values are the activity instance IDs supplied
            by the Get Activity Instance request. If there are multiple parent activity
            instances of the targeted activity, this specifies the ancestor scope
            in which hierarchy the activity/transition is to be instantiated. Example:
            When there are two instances of a subprocess and an activity contained
            in the subprocess is to be started, this parameter allows to specifiy
            under which subprocess instance the activity should be started. variables
            Can be used with instructions of type startBeforeActivity, startAfterActivity,
            and startTransition. A JSON object containing variable key-value pairs.
            Each key is a variable name and each value a JSON variable value object.',
          id: instructions, required: null, type: null}
      responseCodes:
        '400': {description: At least one modification instruction misses required parameters.,
          id: '400', required: null, type: application/json}
        '500': {description: 'The modification cannot be performed, for example because
            it starts a failing activity.', id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: POST `/process-instance/{id}/modification`
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id056
      description: Deletes a running process instance by id.
      method: DELETE
      path: /process-instance/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Process instance with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a running process instance by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id067
      description: Activates or suspends process instances with the given process definition id.
      method: PUT
      path: /process-instance/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'Returned if some of the request parameters are invalid,
            for example if the provided processDefinitionId parameter is null. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends process instances with the given process definition id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a deployment by id.
      method: DELETE
      path: /deployment/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Deployment with id 'aDeploymentId' does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a deployment by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id037
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id038
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id039
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id040
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id089
      description: |-
        Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy.
        Please note: deletion precedes update.
      method: POST
      path: /case-execution/{id}/localVariables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: 'Update or deletion could not be executed, for example
            because the case execution does not exist.', id: '500', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: |-
        Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy.
        Please note: deletion precedes update.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id041
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id090
      description: 'Updates or deletes the variables of a case execution by id. Please
        note: deletion precedes update.'
      method: POST
      path: /case-execution/{id}/variables
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: 'Update or deletion could not be executed, for example
            because the case execution does not exist.', id: '500', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: 'Updates or deletes the variables of a case execution by
        id. Please note: deletion precedes update.'
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id105
      description: Activates or suspends process definitions with the given process definition key.
      method: PUT
      path: /process-definition/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'Returned if some of the request parameters are invalid,
            for example if the provided executionDate parameter doesn''t have the
            expected format or if the processDefinitionKey parameter is null. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends process definitions with the given process definition key.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id042
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id106
      description: Activates or suspends a given process definition by id or by latest version of process definition key.
      method: PUT
      path: /process-definition/{id}/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'Returned if some of the request parameters are invalid,
            for example if the provided executionDate parameter doesn''t have the
            expected format. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Process definition with given key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Activates or suspends a given process definition by id or by latest version of process definition key.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id043
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id044
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id045
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id063
      description: Activates or suspends job definitions with the given process definition id.
      method: PUT
      path: /job-definition/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'Returned if some of the request parameters are invalid,
            for example if the provided executionDate parameter doesn''t have the
            expected format or if the processDefinitionId parameter is null. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends job definitions with the given process definition id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id046
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id047
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id064
      description: Activates or suspends a given job definition by id.
      method: PUT
      path: /job-definition/{id}/suspended
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'Returned if some of the request parameters are invalid,
            for example if the provided executionDate parameter doesn''t have the
            expected format. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
      resultDescription: Activates or suspends a given job definition by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id101
      description: Updates the profile information of an already existing user.
      method: PUT
      path: /user/{id}/profile
      pathParameters:
        id: {description: The id of the user., id: id, required: null, type: String}
      queryParameters: {}
      requestBody:
        firstName: {description: The firstname of the user., id: firstName, required: null,
          type: String}
        lastName: {description: The lastname of the user., id: lastName, required: null,
          type: String}
        id: {description: The id of the user., id: id, required: null, type: String}
        email: {description: The email of the user., id: email, required: null, type: String}
      responseCodes:
        '500': {description: The user could not be updated due to an internal server error. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
        '404': {description: If the user with the requested Id cannot be found., id: '404',
          required: null, type: application/json}
      resultDescription: Updates the profile information of an already existing user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a user by id.
      method: DELETE
      path: /user/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '403': {description: Identity service is read-only (Cannot modify users / groups / memberships).,
          id: '403', required: null, type: application/json}
        '404': {description: User cannot be found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a user by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id048
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id049
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id050
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id051
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id052
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id053
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a job by id.
      method: DELETE
      path: /job/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The job could not be deleted. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a job by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: "Executes a job by id. \nNote: The execution of the job happens\
        \ synchronously in the same thread."
      method: POST
      path: /job/{id}/execute
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: The job could not be executed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Job with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: "Executes a job by id. \nNote: The execution of the job happens\
        \ synchronously in the same thread."
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id054
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id055
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id059
      description: |-
        Deletes a batch by id, including all related jobs and job definitions. Optionally also
        deletes the batch history.
      method: DELETE
      path: /batch/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Deployment with id 'aDeploymentId' does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: |-
        Deletes a batch by id, including all related jobs and job definitions. Optionally also
        deletes the batch history.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id056
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id097
      description: Completes an external task by id and updates process variables.
      method: POST
      path: /external-task/{id}/complete
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '500': {description: Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Completes an external task by id and updates process variables.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id057
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
      method: POST
      path: /external-task/{id}/bpmnError
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '500': {description: Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id099
      description: Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
      method: POST
      path: /external-task/{id}/failure
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '500': {description: Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id058
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Unlocks an external task by id. Clears the task's lock expiration time and worker id.
      method: POST
      path: /external-task/{id}/unlock
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: 'Returned if the task does not exist. This could indicate
            a wrong task id as well as a cancelled task, e.g., due to a caught BPMN
            boundary event. See the Introduction for the error response format.',
          id: '404', required: null, type: application/json}
      resultDescription: Unlocks an external task by id. Clears the task's lock expiration time and worker id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id059
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id060
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id061
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a tenant by id.
      method: DELETE
      path: /tenant/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
        '404': {description: Tenant cannot be found. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a tenant by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Creates a membership between a tenant and a group.
      method: PUT
      path: /tenant/{id}/group-members/{groupId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: In case an internal error occurs. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
      resultDescription: Creates a membership between a tenant and a group.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a membership between a tenant and a group.
      method: DELETE
      path: /tenant/{id}/group-members/{groupId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: In case an error occurs. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
      resultDescription: Deletes a membership between a tenant and a group.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Creates a membership between a tenant and an user.
      method: PUT
      path: /tenant/{id}/user-members/{userId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '500': {description: In case an internal error occurs. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
      resultDescription: Creates a membership between a tenant and an user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a membership between a tenant and an user.
      method: DELETE
      path: /tenant/{id}/user-members/{userId}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: In case an error occurs. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '403': {description: Identity service is read-only., id: '403', required: null,
          type: application/json}
      resultDescription: Deletes a membership between a tenant and an user.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id062
  org.camunda.bpm.engine.rest.dto.management.JobDefinitionSuspensionStateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id063
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id064
  org.camunda.bpm.engine.rest.history.HistoricCaseActivityInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic case activity instances that fulfill the given parameters. The size of the
        result set can be retrieved by using the Get Historic Case Activity Instance Count
      method: GET
      path: /history/case-activity-instance
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic case activity instances that fulfill the given parameters. The size of the
        result set can be retrieved by using the Get Historic Case Activity Instance Count
  org.camunda.bpm.engine.rest.dto.externaltask.SetRetriesForExternalTasksDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id065
  org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceSuspensionStateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id066
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id067
  org.camunda.bpm.engine.rest.dto.task.UserIdDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id068
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id069
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id070
  org.camunda.bpm.engine.rest.sub.task.TaskAttachmentResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Gets the attachments for a task.
      method: GET
      path: /task/{id}/attachment
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: No task exists for the given task id. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Gets the attachments for a task.
  org.camunda.bpm.engine.rest.dto.history.HistoricVariableInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id071
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id072
  org.camunda.bpm.engine.rest.sub.identity.GroupResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id095
      description: Retrieves a group by id.
      method: GET
      path: /group/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Group with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a group by id.
  org.camunda.bpm.engine.rest.dto.management.JobDefinitionQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id116
      description: Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the Get Job Definitions (POST)Get Job Definition Count
      method: POST
      path: /job-definition/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the Get Job Definitions (POST)Get Job Definition Count
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation:
      description: Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the Get Job DefinitionsString, Number or Boolean.
      method: POST
      path: /job-definition
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are jobDefinitionId, activityId, processDefinitionId,
            processDefinitionKey, jobType, jobConfiguration and tenantId. sortOrder
            Mandatory. Sort the results in a given order. Values may be asc for ascending
            order or desc for descending order.', id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the Get Job DefinitionsString, Number or Boolean.
  org.camunda.bpm.engine.rest.sub.runtime.EventSubscriptionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id102
      description: Retrieves a message event subscription for a given execution by id and a message name.
      method: GET
      path: /execution/{id}/messageSubscriptions/{messageName}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: 'A message subscription for the given name and execution
            does not exist. This may either mean that the execution does not exist,
            or that it is not subscribed on such a message. See the Introduction for
            the error response format.', id: '404', required: null, type: application/json}
      resultDescription: Retrieves a message event subscription for a given execution by id and a message name.
  java.util.List:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id073
  org.camunda.bpm.engine.rest.dto.migration.MigrationPlanGenerationDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id074
  javax.ws.rs.core.Response:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id075
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the number of tasks for each candidate group.
      method: GET
      path: /task/report/candidate-group-count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. In case of an expected application/csv or text/csv response to retrieve the result as a csv file.,
          id: '200', required: null, type: application/csv or text/csv}
        '400': {description: Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '403': {description: If the authenticated user is unauthorized to read the history. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
      resultDescription: Retrieves the number of tasks for each candidate group.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a Generated Task Form
      method: GET
      path: /task/{id}/rendered-form
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/xhtml+xml}
        '400': {description: The task with the given id does not exist or has no form field metadata defined for this task. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a Generated Task Form
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the diagram of a decision requirements definition.
      method: GET
      path: /decision-requirements-definition/{id}/diagram
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves the diagram of a decision requirements definition.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id076
      description: Retrieves the content of a variable by id. Applicable for byte array and file variables.
      method: GET
      path: /variable-instance/{id}/data
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves the content of a variable by id. Applicable for byte array and file variables.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id076
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the binary content of a deployment resource for the given deployment by id.
      method: GET
      path: /deployment/{id}/resources/{resourceId}/data
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. The media type of the response depends on the filename. For example a process.bpmn resource will have the media type application/xml. If the filetype is unknown it defaults to application/octet-stream.,
          id: '200', required: null, type: '*'}
        '404': {description: Deployment Resource with given resource id or deployment id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the binary content of a deployment resource for the given deployment by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the diagram of a process definition.
      method: GET
      path: /process-definition/{id}/diagram
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: 'image/png,
            image/gif, ... (defaults to application/octet-stream if the file suffix
            is unknown'}
        '204': {description: The process definition doesn't have an associated diagram.,
          id: '204', required: null, type: ''}
        '404': {description: Process definition with given id or key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the diagram of a process definition.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form
      method: GET
      path: /process-definition/{id}/rendered-form
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/xhtml+xml}
        '400': {description: Process definition has no form field metadata defined. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '404': {description: Process definition with given key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Deletes a process definition from a deployment by id.
      method: DELETE
      path: /process-definition/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: ''}
        '404': {description: Process definition with id 'aProcessDefinitionId' does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Deletes a process definition from a deployment by id.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the diagram of a case definition.
      method: GET
      path: /case-definition/{id}/diagram
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: 'image/png,
            image/gif, ... (defaults to application/octet-stream if the file suffix
            is unknown'}
        '204': {description: The case definition doesn't have an associated diagram.,
          id: '204', required: null, type: ''}
        '404': {description: Case definition with given id or key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the diagram of a case definition.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the diagram of a decision definition.
      method: GET
      path: /decision-definition/{id}/diagram
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves the diagram of a decision definition.
  org.camunda.bpm.engine.rest.dto.authorization.AuthorizationCheckResultDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Performs an authorization check for the currently authenticated user.
      method: GET
      path: /authorization/check
      pathParameters: {}
      queryParameters:
        permissionValue: {description: String representation of an integer value representing the permission value to check for.,
          id: permissionValue, required: true, type: null}
        resourceId: {description: 'The id of the resource to check permissions for.
            If left blank, a check for global permissions on the resource is performed.',
          id: resourceId, required: false, type: null}
        resourceName: {description: String value for the name of the resource to check permissions for.,
          id: resourceName, required: true, type: null}
        permissionName: {description: String value representing the permission name to check for.,
          id: permissionName, required: true, type: null}
        resourceType: {description: An integer representing the resource type to check permissions for. See the User Guide for a list of integer representations of resource types.,
          id: resourceType, required: true, type: null}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Authorization with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Performs an authorization check for the currently authenticated user.
  org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id081
      description: |-
        Queries for process instances that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Instances
        filtering by multiple process variables of types `String`, `Number` or `Boolean`.
      method: POST
      path: /process-instance
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are instanceId, definitionKey, definitionId,
            tenantId and businessKey. sortOrder Mandatory. Sort the results in a given
            order. Values may be asc for ascending order or desc for descending order.',
          id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for process instances that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Instances
        filtering by multiple process variables of types `String`, `Number` or `Boolean`.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id082
      description: |-
        Queries for the number of process instances that fulfill the given parameters.
        This method takes the same message body as the Get Instances (POST)
        and therefore it is slightly more powerful than the Get Instance Count
      method: POST
      path: /process-instance/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for the number of process instances that fulfill the given parameters.
        This method takes the same message body as the Get Instances (POST)
        and therefore it is slightly more powerful than the Get Instance Count
  org.camunda.bpm.engine.rest.history.HistoricDetailRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic details that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Historic Detail Count
      method: GET
      path: /history/detail
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic details that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Historic Detail Count
  org.camunda.bpm.engine.rest.sub.batch.BatchResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id005
  org.camunda.bpm.engine.rest.dto.runtime.modification.ProcessInstanceModificationDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id077
  org.camunda.bpm.engine.rest.dto.identity.BasicUserCredentialsDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id078
  org.camunda.bpm.engine.rest.dto.repository.DeploymentDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id107
      description: Re-deploys an existing deployment.
      method: POST
      path: /deployment/{id}/redeploy
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Deployment or a deployment resource for the given deployment does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Re-deploys an existing deployment.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id079
  org.camunda.bpm.engine.rest.dto.management.JobDefinitionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id080
  org.camunda.bpm.engine.rest.dto.history.HistoricProcessInstanceQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id081
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id082
  org.camunda.bpm.engine.rest.dto.externaltask.ExternalTaskQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id120
      description: Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the Get External Tasks (POST)
      method: POST
      path: /external-task/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the Get External Tasks (POST)
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation:
      description: |-
        Queries for external tasks that fulfill given parameters in the form of a JSON object.
        This method is slightly more powerful than the Get External Tasks
      method: POST
      path: /external-task
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are id, lockExpirationTime, processInstanceId,
            processDefinitionId, processDefinitionKey, taskPriority and tenantId.
            sortOrder Mandatory. Sort the results in a given order. Values may be
            asc for ascending order or desc for descending order.', id: sorting, required: null,
          type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for external tasks that fulfill given parameters in the form of a JSON object.
        This method is slightly more powerful than the Get External Tasks
  org.camunda.bpm.engine.rest.sub.externaltask.ExternalTaskResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id103
      description: Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
      method: GET
      path: /external-task/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: External task with the given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
  org.camunda.bpm.engine.rest.history.HistoricCaseActivityStatisticsRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Retrieves historic statistics of a given case definition grouped by activities.
        These statistics include the number of active, available, completed, disabled, enabled and completed case activity instances.
      method: GET
      path: /history/case-definition/{id}/statistics
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
      resultDescription: |-
        Retrieves historic statistics of a given case definition grouped by activities.
        These statistics include the number of active, available, completed, disabled, enabled and completed case activity instances.
  org.camunda.bpm.engine.rest.sub.history.HistoricCaseInstanceResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id083
  org.camunda.bpm.engine.rest.dto.PatchVariablesDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id084
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id085
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id086
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id087
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id088
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id089
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id090
  org.camunda.bpm.engine.rest.dto.ResourceOptionsDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /group
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /group/{id}/members
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /authorization
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /filter
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/user` resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /user
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/user` resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /tenant/{id}/group-members
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /tenant/{id}/user-members
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
      method: OPTIONS
      path: /tenant
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
      resultDescription: The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
  org.camunda.bpm.engine.rest.dto.authorization.AuthorizationCreateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id091
  org.camunda.bpm.engine.rest.sub.repository.DecisionDefinitionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id092
  org.camunda.bpm.engine.rest.sub.runtime.VariableInstanceResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id008
  org.camunda.bpm.engine.rest.sub.repository.ProcessDefinitionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id093
  org.camunda.bpm.engine.rest.dto.identity.GroupDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id094
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id095
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id096
  org.camunda.bpm.engine.rest.dto.externaltask.CompleteExternalTaskDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id097
  org.camunda.bpm.engine.rest.dto.runtime.CaseInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id083
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id098
  org.camunda.bpm.engine.rest.dto.externaltask.ExternalTaskFailureDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id099
  org.camunda.bpm.engine.rest.sub.runtime.CaseExecutionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id100
  org.camunda.bpm.engine.rest.history.HistoricIdentityLinkLogRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic identity link logs that fulfill given parameters.
        The size of the result set can be retrieved by using the Get Identity-Link-Log Count
      method: GET
      path: /history/identity-link-log
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic identity link logs that fulfill given parameters.
        The size of the result set can be retrieved by using the Get Identity-Link-Log Count
  org.camunda.bpm.engine.rest.dto.identity.UserProfileDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id101
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves a user's profile.
      method: GET
      path: /user/{id}/profile
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Execution with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a user's profile.
  org.camunda.bpm.engine.rest.dto.runtime.EventSubscriptionDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id102
  org.camunda.bpm.engine.rest.dto.externaltask.ExternalTaskDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id103
  org.camunda.bpm.engine.rest.sub.repository.DeploymentResourcesResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves all deployment resources of a given deployment.
      method: GET
      path: /deployment/{id}/resources
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: Deployment resources for the given deployment do not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves all deployment resources of a given deployment.
  org.camunda.bpm.engine.rest.sub.runtime.ExecutionResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id104
  org.camunda.bpm.engine.rest.history.HistoricExternalTaskLogRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic external task logs that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get External Task Log Count
      method: GET
      path: /history/external-task-log
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic external task logs that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get External Task Log Count
  org.camunda.bpm.engine.rest.dto.repository.DecisionRequirementsDefinitionXmlDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the DMN XML of a decision requirements definition.
      method: GET
      path: /decision-requirements-definition/{id}/xml
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: Retrieves the DMN XML of a decision requirements definition.
  org.camunda.bpm.engine.rest.dto.runtime.CaseExecutionQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation:
      description: |-
        Queries for case executions that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Case Executions
        filtering by multiple case variables of types `String`, `Number` or `Boolean`.
      method: POST
      path: /case-execution
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are caseExecutionId, caseDefinitionKey,
            caseDefinitionId and tenantId. sortOrder Mandatory. Sort the results in
            a given order. Values may be asc for ascending order or desc for descending
            order.', id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for case executions that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Case Executions
        filtering by multiple case variables of types `String`, `Number` or `Boolean`.
  org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionSuspensionStateDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id105
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id106
  org.camunda.bpm.engine.rest.sub.task.TaskResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id109
      description: Retrieves a task by id.
      method: GET
      path: /task/{id}
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '404': {description: Task with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves a task by id.
  org.camunda.bpm.engine.rest.history.HistoricDecisionInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic decision instances that fulfill the given parameters. The
        size of the result set can be retrieved by using the Get Historic Decision Instance Count
      method: GET
      path: /history/decision-instance
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic decision instances that fulfill the given parameters. The
        size of the result set can be retrieved by using the Get Historic Decision Instance Count
  org.camunda.bpm.engine.rest.dto.runtime.JobQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation:
      description: Queries for jobs that fulfill given parameters. This method is slightly more powerful than the Get JobsString, Number or Boolean.
      method: POST
      path: /job
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results by a given criterion. Valid
            values are jobId, executionId, processInstanceId, jobPriority, jobRetries,
            jobDueDate and tenantId. sortOrder Mandatory. Sort the results in a given
            order. Values may be asc for ascending order or desc for descending order.',
          id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for due date comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: Queries for jobs that fulfill given parameters. This method is slightly more powerful than the Get JobsString, Number or Boolean.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id118
      description: Queries for jobs that fulfill given parameters. This method takes the same message body as the Get Jobs (POST)Get Job Count
      method: POST
      path: /job/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for due date comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: Queries for jobs that fulfill given parameters. This method takes the same message body as the Get Jobs (POST)Get Job Count
  org.camunda.bpm.engine.rest.history.HistoricTaskInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic tasks that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Task Count
      method: GET
      path: /history/task
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic tasks that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Task Count
  org.camunda.bpm.engine.rest.dto.runtime.ExecutionQueryDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: &id112
      description: Queries for the number of executions that fulfill given parameters. This method takes the same message body as the Get Executions (POST)Get Execution Count
      method: POST
      path: /execution/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: Queries for the number of executions that fulfill given parameters. This method takes the same message body as the Get Executions (POST)Get Execution Count
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation:
      description: |-
        Queries for executions that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Executions
        to filter by multiple instance and execution variables of types `String`, `Number` or `Boolean`.
      method: POST
      path: /execution
      pathParameters: {}
      queryParameters: {}
      requestBody:
        sorting: {description: 'A JSON array of criteria to sort the result by. Each
            element of the array is a JSON object that specifies one ordering. The
            position in the array identifies the rank of an ordering, i.e., whether
            it is primary, secondary, etc. The ordering objects have the following
            properties: sortBy Mandatory. Sort the results lexicographically by a
            given criterion. Valid values are instanceId, definitionKey, definitionId
            and tenantId. sortOrder Mandatory. Sort the results in a given order.
            Values may be asc for ascending order or desc for descending order.',
          id: sorting, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for executions that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Executions
        to filter by multiple instance and execution variables of types `String`, `Number` or `Boolean`.
  org.camunda.bpm.engine.rest.sub.runtime.CaseInstanceResource:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id083
  org.camunda.bpm.engine.rest.dto.repository.RedeploymentDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id107
  org.camunda.bpm.engine.rest.history.HistoricProcessInstanceRestService:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for historic process instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Process Instance Count
      method: GET
      path: /history/process-instance
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for historic process instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the Get Process Instance Count
  org.camunda.bpm.engine.rest.dto.runtime.batch.DeleteProcessInstancesDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id108
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id014
  org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id007
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id110
      description: Instantiates a given process definition. Process variables and business key may be supplied in the request body.
      method: POST
      path: /process-definition/{id}/start
      pathParameters: {}
      queryParameters: {}
      requestBody:
        startInstructions: {description: 'Optional. A JSON array of instructions that
            specify which activities to start the process instance at. If this property
            is omitted, the process instance starts at its default blank start event.
            The instructions are executed in the order they are in. An instruction
            may have the following properties: type Mandatory. One of the following
            values: startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity
            instruction requests to start execution before entering a given activity.
            A startAfterActivity instruction requests to start at the single outgoing
            sequence flow of a given activity. A startTransition instruction requests
            to execute a specific sequence flow. activityId Can be used with instructions
            of types startBeforeActivity and startAfterActivity. Specifies the activity
            the instruction targets. transitionId Can be used with instructions of
            types startTransition. Specifies the sequence flow to start. variables
            Can be used with instructions of type startBeforeActivity, startAfterActivity,
            and startTransition. A JSON object containing variable key-value pairs.
            Each key is a variable name and each value a JSON variable value object.',
          id: startInstructions, required: null, type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'The instance could not be created due to an invalid
            variable value, for example if the value could not be parsed to an Integer
            value or the passed variable type is not supported. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
        '500': {description: The instance could not be created successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '404': {description: The instance could not be created due to a non existing process definition key. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Instantiates a given process definition. Process variables and business key may be supplied in the request body.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id111
      description: Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms
      method: POST
      path: /process-definition/{id}/submit-form
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '400': {description: 'The variable value or type is invalid, for example if
            the value could not be parsed to an Integer value or the passed variable
            type is not supported. See the Introduction for the error response format.',
          id: '400', required: null, type: application/json}
        '500': {description: The instance could not be created successfully. See the Introduction for the error response format.,
          id: '500', required: null, type: application/json}
        '204': {description: Request successful., id: '204', required: null, type: ''}
        '404': {description: Process definition with given key does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms
  java.lang.Object:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for tasks that fulfill a given filter.
        The size of the result set can be retrieved by using the Get Task Count
      method: GET
      path: /task
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for tasks that fulfill a given filter.
        The size of the result set can be retrieved by using the Get Task Count
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id109
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Executes the saved query of the filter by id and returns the result list. This method is slightly more
        powerful then the Get Execute Filter List
        query of the filter.
      method: POST
      path: /filter/{id}/list
      pathParameters: {}
      queryParameters: {}
      requestBody:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '400': {description: The extending query was invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      responseCodes: {}
      resultDescription: |-
        Executes the saved query of the filter by id and returns the result list. This method is slightly more
        powerful then the Get Execute Filter List
        query of the filter.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Executes the saved query of the filter by id and returns the single result.
      method: GET
      path: /filter/{id}/singleResult
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '400': {description: The executed filter returned more than one single result. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: 'Request successful, but the result was empty.', id: '204',
          required: null, type: ''}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Executes the saved query of the filter by id and returns the single result.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Executes the saved query of the filter by id and returns the result list.
      method: GET
      path: /filter/{id}/list
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Executes the saved query of the filter by id and returns the result list.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Executes the saved query of the filter by id and returns the single result. This method is slightly more
        powerful then the Get Execute Filter Single Result
        the saved query of the filter.
      method: POST
      path: /filter/{id}/singleResult
      pathParameters: {}
      queryParameters: {}
      requestBody:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '400': {description: The executed filter returned more than one single result or the extending query was invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: 'Request successful, but the result was empty.', id: '204',
          required: null, type: ''}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      responseCodes:
        '200': {description: Request successful. In case of an expected HAL response.,
          id: '200', required: null, type: application/hal+json}
        '400': {description: The executed filter returned more than one single result or the extending query was invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '204': {description: 'Request successful, but the result was empty.', id: '204',
          required: null, type: ''}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: |-
        Executes the saved query of the filter by id and returns the single result. This method is slightly more
        powerful then the Get Execute Filter Single Result
        the saved query of the filter.
  org.camunda.bpm.engine.rest.dto.runtime.StartProcessInstanceDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id110
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation: *id111
  org.camunda.bpm.engine.rest.dto.CountResultDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id112
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for the number of executions that fulfill given parameters.
        Takes the same parameters as the Get Executions
      method: GET
      path: /execution/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for the number of executions that fulfill given parameters.
        Takes the same parameters as the Get Executions
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Queries for groups using a list of parameters and retrieves the count.
      method: GET
      path: /group/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy is specified.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: Queries for groups using a list of parameters and retrieves the count.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id022
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id113
      description: |-
        Retrieves the number of tasks that fulfill a provided filter.
        Corresponds to the size of the result set when using the Get Tasks
      method: GET
      path: /task/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Returned if some of the query parameters are invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: |-
        Retrieves the number of tasks that fulfill a provided filter.
        Corresponds to the size of the result set when using the Get Tasks
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id022
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id113
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id010
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id114
      description: |-
        Queries for the number of case instances that fulfill given parameters.
        Takes the same parameters as the Get Case Instances
      method: GET
      path: /case-instance/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if an invalid operator for variable comparison is used. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for the number of case instances that fulfill given parameters.
        Takes the same parameters as the Get Case Instances
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Queries for authorizations using a list of parameters and retrieves the count.
      method: GET
      path: /authorization/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy is specified.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: Queries for authorizations using a list of parameters and retrieves the count.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set
        when using the Get Filters
      method: GET
      path: /filter/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set
        when using the Get Filters
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Executes the saved query of the filter by id and returns the count.
      method: GET
      path: /filter/{id}/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Executes the saved query of the filter by id and returns the count.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Executes the saved query of the filter by id and returns the count. This method is slightly more
        powerful then the Get Execute Filter Count
        the saved query of the filter.
      method: POST
      path: /filter/{id}/count
      pathParameters: {}
      queryParameters: {}
      requestBody:
        count: {description: The number of filters that fulfill the query criteria.,
          id: count, required: null, type: Number}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: The extending query was invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
        '403': {description: The authenticated user is unauthorized to read this filter. See the Introduction for the error response format.,
          id: '403', required: null, type: application/json}
        '404': {description: Filter with given id does not exist. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: |-
        Executes the saved query of the filter by id and returns the count. This method is slightly more
        powerful then the Get Execute Filter Count
        the saved query of the filter.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id082
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id119
      description: |-
        Queries for the number of process instances that fulfill given parameters.
        Takes the same parameters as the Get Instances
      method: GET
      path: /process-instance/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: |-
        Queries for the number of process instances that fulfill given parameters.
        Takes the same parameters as the Get Instances
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Requests the number of decision requirements definitions that fulfill the query criteria.
        Takes the same filtering parameters as the Get Decision Requirements Definitions
        "reference/rest/decision-requirements-definition/get-query.md" >}}) method.
      method: GET
      path: /decision-requirements-definition/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Requests the number of decision requirements definitions that fulfill the query criteria.
        Takes the same filtering parameters as the Get Decision Requirements Definitions
        "reference/rest/decision-requirements-definition/get-query.md" >}}) method.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id117
      description: |-
        Queries for the number of incidents that fulfill given parameters.
        Takes the same parameters as the Get Incidents
      method: GET
      path: /incident/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for the number of incidents that fulfill given parameters.
        Takes the same parameters as the Get Incidents
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id072
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id115
      description: Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the Get Variable Instances
      method: GET
      path: /variable-instance/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the Get Variable Instances
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id114
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id010
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id115
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id072
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the Get Deployments
      method: GET
      path: /deployment/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if
            an invalid operator for variable comparison is used. See the Introduction
            for the error response format.', id: '400', required: null, type: application/json}
      resultDescription: Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the Get Deployments
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for the number of case executions that fulfill given parameters.
        Takes the same parameters as the Get Case Executions
      method: GET
      path: /case-execution/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if an invalid operator for variable comparison is used. See
            the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for the number of case executions that fulfill given parameters.
        Takes the same parameters as the Get Case Executions
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the
        Get Definitions
      method: GET
      path: /process-definition/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the
        Get Definitions
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Requests the number of case definitions that fulfill the query criteria. Takes the same filtering parameters as the
        Get Case Definitions
      method: GET
      path: /case-definition/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Requests the number of case definitions that fulfill the query criteria. Takes the same filtering parameters as the
        Get Case Definitions
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Requests the number of decision definitions that fulfill the query criteria.
        Takes the same filtering parameters as the Get Decision Definitions
        "reference/rest/decision-definition/get-query.md" >}}) method.
      method: GET
      path: /decision-definition/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Requests the number of decision definitions that fulfill the query criteria.
        Takes the same filtering parameters as the Get Decision Definitions
        "reference/rest/decision-definition/get-query.md" >}}) method.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for the number of job definitions that fulfill given parameters.
        Takes the same parameters as the Get Job Definitions
      method: GET
      path: /job-definition/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for the number of job definitions that fulfill given parameters.
        Takes the same parameters as the Get Job Definitions
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id116
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id117
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Query for users using a list of parameters and retrieves the count.
      method: GET
      path: /user/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy is specified.
            See the Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: Query for users using a list of parameters and retrieves the count.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for the number of jobs that fulfill given parameters.
        Takes the same parameters as the Get Jobs
      method: GET
      path: /job/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Queries for the number of jobs that fulfill given parameters.
        Takes the same parameters as the Get Jobs
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id118
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Requests the number of batch statistics that fulfill the query criteria.  Takes
        the same filtering parameters as the Get Batch Statistics
        "reference/rest/batch/get-statistics-query.md" >}}) method.
      method: GET
      path: /batch/statistics/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Requests the number of batch statistics that fulfill the query criteria.  Takes
        the same filtering parameters as the Get Batch Statistics
        "reference/rest/batch/get-statistics-query.md" >}}) method.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: &id121
      description: |-
        Requests the number of batches that fulfill the query criteria.
        Takes the same filtering parameters as the Get Batches
        "reference/rest/batch/get-query.md" >}}) method.
      method: GET
      path: /batch/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes: {}
      resultDescription: |-
        Requests the number of batches that fulfill the query criteria.
        Takes the same filtering parameters as the Get Batches
        "reference/rest/batch/get-query.md" >}}) method.
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id119
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id082
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id120
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: |-
        Queries for the number of external tasks that fulfill given parameters.
        Takes the same parameters as the Get External Tasks
      method: GET
      path: /external-task/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: 'Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy. See the
            Introduction for the error response format.', id: '400', required: null,
          type: application/json}
      resultDescription: |-
        Queries for the number of external tasks that fulfill given parameters.
        Takes the same parameters as the Get External Tasks
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation: *id121
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Query for tenants using a list of parameters and retrieves the count.
      method: GET
      path: /tenant/count
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: Returned if some of the query parameters are invalid. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: Query for tenants using a list of parameters and retrieves the count.
  org.camunda.bpm.engine.rest.dto.externaltask.FetchExternalTasksDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: METHOD_PARAM
    restOperation:
      description: Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
      method: POST
      path: /external-task/fetchAndLock
      pathParameters: {}
      queryParameters: {}
      requestBody:
        topics: {description: 'A JSON array of topic objects for which external tasks
            should be fetched. The returned tasks may be arbitrarily distributed among
            these topics. Each topic object has the following properties: Name Description
            topicName Mandatory. The topic''s name. lockDuration Mandatory. The duration
            to lock the external tasks for in milliseconds. variables A JSON array
            of String values that represent variable names. For each result task belonging
            to this topic, the given variables are returned as well if they are accessible
            from the external task''s execution. If not provided - all variables will
            be fetched. deserializeValues Determines whether serializable variable
            values (typically variables that store custom Java objects) should be
            deserialized on server side (default false).', id: topics, required: null,
          type: null}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '500': {description: 'Returned if fetching is not successful, for example
            due to missing parameters. See the Introduction for the error response
            format.', id: '500', required: null, type: application/json}
      resultDescription: Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
  java.io.InputStream:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Retrieves the binary content of a task attachment by task id and attachment id.
      method: GET
      path: /task/{id}/attachment/{attachmentId}/data
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '404': {description: The attachment content for given task and attachment id does not exist or the history of the engine is disabled. See the Introduction for the error response format.,
          id: '404', required: null, type: application/json}
      resultDescription: Retrieves the binary content of a task attachment by task id and attachment id.
  org.camunda.bpm.engine.rest.dto.task.GroupInfoDto:
  - !!org.camunda.bpm.swagger.docs.model.DocStyleOperationPair
    docStyle: RETURN_TYPE
    restOperation:
      description: Gets the groups of a user by id and includes all users that share a group with the given user.
      method: GET
      path: /identity/groups
      pathParameters: {}
      queryParameters: {}
      requestBody: {}
      responseCodes:
        '200': {description: Request successful., id: '200', required: null, type: application/json}
        '400': {description: If the userId query parameter is missing. See the Introduction for the error response format.,
          id: '400', required: null, type: application/json}
      resultDescription: Gets the groups of a user by id and includes all users that share a group with the given user.
