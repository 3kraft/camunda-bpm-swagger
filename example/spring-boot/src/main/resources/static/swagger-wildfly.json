{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/engine-rest/engine/default",
  "tags": [
    {
      "name": "Authorization"
    },
    {
      "name": "Batch"
    },
    {
      "name": "Case Definition"
    },
    {
      "name": "Case Execution"
    },
    {
      "name": "Case Instance"
    },
    {
      "name": "Decision Definition"
    },
    {
      "name": "Decision Requirement Definition Execution"
    },
    {
      "name": "Deployment"
    },
    {
      "name": "Execution"
    },
    {
      "name": "External"
    },
    {
      "name": "Filter"
    },
    {
      "name": "Group"
    },
    {
      "name": "Historic"
    },
    {
      "name": "History"
    },
    {
      "name": "Identity"
    },
    {
      "name": "Incident"
    },
    {
      "name": "Job Definition"
    },
    {
      "name": "Job Execution"
    },
    {
      "name": "Message"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Migration"
    },
    {
      "name": "Modification"
    },
    {
      "name": "Process Definition"
    },
    {
      "name": "Process Instance"
    },
    {
      "name": "Task"
    },
    {
      "name": "Tenant"
    },
    {
      "name": "User"
    },
    {
      "name": "Variable"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/authorization/count": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Queries for authorizations using a list of parameters and retrieves the count",
        "description": "Queries for authorizations using a list of parameters and retrieves the count.",
        "operationId": "getAuthorizationCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/authorization": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Queries for a list of authorizations using a list of parameters",
        "description": "Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the Get Authorization Count method.",
        "operationId": "queryAuthorizations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Authorization"
        ],
        "summary": "The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances",
        "description": "The `/authorization` resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "availableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/authorization/create": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Creates a new authorization",
        "description": "Creates a new authorization.",
        "operationId": "createAuthorization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter authorizationCreateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthorizationCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "The authorization could not be updated due to an internal server error. See the Introduction for the error response format."
          },
          "403": {
            "description": "The authenticated user is unauthorized to create an instance of this resource. See the Introduction for the error response format."
          }
        }
      }
    },
    "/authorization/check": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Performs an authorization check for the currently authenticated user",
        "description": "Performs an authorization check for the currently authenticated user.",
        "operationId": "isUserAuthorized",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionName",
            "in": "query",
            "description": "String value representing the permission name to check for.",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceName",
            "in": "query",
            "description": "String value for the name of the resource to check permissions for.",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "An integer representing the resource type to check permissions for. See the User Guide for a list of integer representations of resource types.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resourceId",
            "in": "query",
            "description": "The id of the resource to check permissions for. If left blank, a check for global permissions on the resource is performed.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Authorization with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/authorization/{id}": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Retrieves an authorization by id",
        "description": "Retrieves an authorization by id.",
        "operationId": "getAuthorizationGetAuthorization",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Authorization with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put": {
        "tags": [
          "Authorization"
        ],
        "summary": "Updates an authorization by id",
        "description": "Updates an authorization by id.",
        "operationId": "getAuthorizationUpdateAuthorization",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter authorizationDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthorizationDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The authorization could not be updated due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The authenticated user is unauthorized to update this resource. See the Introduction for the error response format."
          },
          "404": {
            "description": "The authorization with the requested Id cannot be found."
          }
        }
      },
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Deletes an authorization by id",
        "description": "Deletes an authorization by id.",
        "operationId": "getAuthorizationDeleteAuthorization",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "403": {
            "description": "If the authenticated user is unauthorized to delete the resource instance. See the Introduction for the error response format."
          },
          "404": {
            "description": "Authorization cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Authorization"
        ],
        "summary": "Available Operations",
        "description": "Available Operations",
        "operationId": "getAuthorizationAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/batch/statistics/count": {
      "get": {
        "tags": [
          "Batch"
        ],
        "summary": "Requests the number of batch statistics that fulfill the query criteria",
        "description": "Requests the number of batch statistics that fulfill the query criteria.  Takes the same filtering parameters as the Get Batch Statistics method.",
        "operationId": "getStatisticsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/batch/{id}/suspended": {
      "put": {
        "tags": [
          "Batch"
        ],
        "summary": "Activates or suspends a batch by id",
        "description": "Activates or suspends a batch by id.",
        "operationId": "getBatchUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter suspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if the batch cannot be suspended or activated. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/batch/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Retrieves a batch by id, according to the `Batch` interface in the engine",
        "description": "Retrieves a batch by id, according to the `Batch` interface in the engine.",
        "operationId": "getHistoricBatchGetHistoricBatch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricBatchDto"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Historic"
        ],
        "summary": "Deletes a batch by id, including all related jobs and job definitions",
        "description": "Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.",
        "operationId": "getHistoricBatchDeleteHistoricBatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Deployment with id 'aDeploymentId' does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/batch/statistics": {
      "get": {
        "tags": [
          "Batch"
        ],
        "summary": "Queries for batch statistics that fulfill given parameters",
        "description": "Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.  The size of the result set can be retrieved by using the Get Batch Statistics Count method.",
        "operationId": "getStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BatchStatisticsDto"
              }
            }
          }
        }
      }
    },
    "/batch": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Queries for batches that fulfill given parameters",
        "description": "Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.  The size of the result set can be retrieved by using the Get Batch Count method.",
        "operationId": "getHistoricBatches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricBatchDto"
              }
            }
          }
        }
      }
    },
    "/batch/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Requests the number of batches that fulfill the query criteria",
        "description": "Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the Get Batches method.",
        "operationId": "getHistoricBatchesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/case-definition/count": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Requests the number of case definitions that fulfill the query criteria",
        "description": "Requests the number of case definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Case Definitions method.",
        "operationId": "getCaseDefinitionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Queries for case definitions that fulfill given parameters",
        "description": "Queries for case definitions that fulfill given parameters. Parameters may be the properties of case definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Case Definition Count method.",
        "operationId": "getCaseDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live": {
      "put": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Update History Time To Live",
        "description": "Update History Time To Live",
        "operationId": "getCaseDefinitionByKeyAndTenantIdUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/create": {
      "post": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Create Case Instance",
        "description": "Create Case Instance",
        "operationId": "getCaseDefinitionByKeyAndTenantIdCreateCaseInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter createCaseInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateCaseInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaseInstanceDto"
            }
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/diagram": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Get Case Definition Diagram",
        "description": "Get Case Definition Diagram",
        "operationId": "getCaseDefinitionByKeyAndTenantIdGetCaseDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}/xml": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Get Case Definition Cmmn Xml",
        "description": "Get Case Definition Cmmn Xml",
        "operationId": "getCaseDefinitionByKeyAndTenantIdGetCaseDefinitionCmmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaseDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/case-definition/key/{key}/tenant-id/{tenantId}": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Get Case Definition",
        "description": "Get Case Definition",
        "operationId": "getCaseDefinitionByKeyAndTenantIdGetCaseDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaseDefinitionDto"
            }
          }
        }
      }
    },
    "/case-definition/key/{key}/create": {
      "post": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Create Case Instance",
        "description": "Create Case Instance",
        "operationId": "getCaseDefinitionByKeyCreateCaseInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter createCaseInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateCaseInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaseInstanceDto"
            }
          }
        }
      }
    },
    "/case-definition/{id}/xml": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Retrieves the CMMN XML of a case definition",
        "description": "Retrieves the CMMN XML of a case definition.",
        "operationId": "getCaseDefinitionByIdGetCaseDefinitionCmmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Retrieves a case definition according to the `CaseDefinition` interface in the engine",
        "description": "Retrieves a case definition according to the `CaseDefinition` interface in the engine.",
        "operationId": "getCaseDefinitionByIdGetCaseDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/create": {
      "post": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Instantiates a given case definition",
        "description": "Instantiates a given case definition. Case variables and business key may be supplied in the request body.",
        "operationId": "getCaseDefinitionByIdCreateCaseInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter createCaseInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateCaseInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "The case instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "The case instance could not be created successfully. See the Introduction for the error response format."
          },
          "403": {
            "description": "The case execution cannot be instantiated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case instance could not be created due to a nonexistent case definition. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/diagram": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Retrieves the diagram of a case definition",
        "description": "Retrieves the diagram of a case definition.",
        "operationId": "getCaseDefinitionByIdGetCaseDefinitionDiagram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "204": {
            "description": "The case definition doesn't have an associated diagram."
          },
          "404": {
            "description": "Case definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/{id}/history-time-to-live": {
      "put": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Updates history time to live for case definition with given id",
        "description": "Updates history time to live for case definition with given id. The field is used within History cleanup.",
        "operationId": "getCaseDefinitionByIdUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "case definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-definition/key/{key}/diagram": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Get Case Definition Diagram",
        "description": "Get Case Definition Diagram",
        "operationId": "getCaseDefinitionByKeyGetCaseDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-definition/key/{key}/history-time-to-live": {
      "put": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Update History Time To Live",
        "description": "Update History Time To Live",
        "operationId": "getCaseDefinitionByKeyUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-definition/key/{key}/xml": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Get Case Definition Cmmn Xml",
        "description": "Get Case Definition Cmmn Xml",
        "operationId": "getCaseDefinitionByKeyGetCaseDefinitionCmmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaseDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/case-definition/key/{key}": {
      "get": {
        "tags": [
          "Case Definition"
        ],
        "summary": "Get Case Definition",
        "description": "Get Case Definition",
        "operationId": "getCaseDefinitionByKeyGetCaseDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaseDefinitionDto"
            }
          }
        }
      }
    },
    "/case-execution/{id}/localVariables/{varId}/data": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getCaseExecutionGetVariablesLocalGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getCaseExecutionGetVariablesLocalSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-execution": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Queries for case executions that fulfill given parameters",
        "description": "Queries for case executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of case executions. The size of the result set can be retrieved by using the Get Case Execution Count method.",
        "operationId": "getCaseExecutions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Queries for case executions that fulfill given parameters through a JSON object",
        "description": "Queries for case executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Case Executions method because it allows filtering by multiple case variables of types `String`, `Number` or `Boolean`.",
        "operationId": "queryCaseExecutions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/count": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Queries for the number of case executions that fulfill given parameters",
        "description": "Queries for the number of case executions that fulfill given parameters. Takes the same parameters as the Get Case Executions method.",
        "operationId": "getCaseExecutionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Query Case Executions Count",
        "description": "Query Case Executions Count",
        "operationId": "queryCaseExecutionsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/case-execution/{id}/localVariables": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Retrieves all variables of a given case execution",
        "description": "Retrieves all variables of a given case execution.",
        "operationId": "getCaseExecutionGetVariablesLocalGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Case execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Updates or deletes the variables in the context of a case execution",
        "description": "Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.",
        "operationId": "getCaseExecutionGetVariablesLocalModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "Update or deletion could not be executed, for example because the case execution does not exist."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/case-execution/{id}/variables": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Retrieves all variables of a given case execution by id",
        "description": "Retrieves all variables of a given case execution by id.",
        "operationId": "getCaseExecutionGetVariablesGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Case execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Updates or deletes the variables of a case execution by id",
        "description": "Updates or deletes the variables of a case execution by id. Please note: deletion precedes update.",
        "operationId": "getCaseExecutionGetVariablesModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "Update or deletion could not be executed, for example because the case execution does not exist."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/case-execution/{id}/complete": {
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "title: \"Complete Case Execution\" weight: 70",
        "description": "title: \"Complete Case Execution\" weight: 70",
        "operationId": "getCaseExecutionComplete",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case execution is enabled or is already completed. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case execution cannot be completed because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/terminate": {
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "title: \"Terminate Case Execution\" weight: 90",
        "description": "title: \"Terminate Case Execution\" weight: 90",
        "operationId": "getCaseExecutionTerminate",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case execution is not in the active state. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case execution cannot be terminated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/manual-start": {
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Performs a transition from ENABLED state to ACTIVE state",
        "description": "Performs a transition from ENABLED state to ACTIVE state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId": "getCaseExecutionManualStart",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case execution is disabled or is already active. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case execution cannot be started because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/reenable": {
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Performs a transition from DISABLED state to ENABLED state",
        "description": "Performs a transition from DISABLED state to ENABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId": "getCaseExecutionReenable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case execution is active or is already enabled. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case execution cannot be reenabled because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Retrieves a case execution by id, according to the `CaseExecution` interface in the engine",
        "description": "Retrieves a case execution by id, according to the `CaseExecution` interface in the engine.",
        "operationId": "getCaseExecutionGetCaseExecution",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Case execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/disable": {
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Performs a transition from ENABLED state to DISABLED state",
        "description": "Performs a transition from ENABLED state to DISABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId": "getCaseExecutionDisable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case execution is active or is already disabled. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case execution cannot be disabled because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case execution with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-execution/{id}/localVariables/{varId}": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getCaseExecutionGetVariablesLocalGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getCaseExecutionGetVariablesLocalPutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getCaseExecutionGetVariablesLocalDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-execution/{id}/variables/{varId}/data": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getCaseExecutionGetVariablesGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getCaseExecutionGetVariablesSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-execution/{id}/variables/{varId}": {
      "get": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getCaseExecutionGetVariablesGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getCaseExecutionGetVariablesPutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Case Execution"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getCaseExecutionGetVariablesDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-instance/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Queries for the number of case instances that fulfill given parameters",
        "description": "Queries for the number of case instances that fulfill given parameters. Takes the same parameters as the Get Case Instances method.",
        "operationId": "getHistoricCaseInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Queries for the number of case executions that fulfill the given parameters",
        "description": "Queries for the number of case executions that fulfill the given parameters. This method takes the same message body as the Get Case Executions (POST) method and therefore it is slightly more powerful than the Get Case Execution Count method.",
        "operationId": "queryHistoricCaseInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicCaseInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricCaseInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-instance": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Queries for case instances that fulfill given parameters",
        "description": "Queries for case instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of case instances. The size of the result set can be retrieved by using the Get Case Instance Count method.",
        "operationId": "getHistoricCaseInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Queries for case instances that fulfill given parameters through a JSON object",
        "description": "Queries for case instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Case Instances method because it allows to filter by multiple case variables of types `String`, `Number` or `Boolean`.",
        "operationId": "queryHistoricCaseInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicCaseInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricCaseInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-instance/{id}/variables": {
      "get": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Retrieves all variables of a given case instance by id",
        "description": "Retrieves all variables of a given case instance by id.",
        "operationId": "getCaseInstanceGetVariablesResourceGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Case instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Updates or deletes the variables of a case instance",
        "description": "Updates or deletes the variables of a case instance. Please note: deletion precedes update.",
        "operationId": "getCaseInstanceGetVariablesResourceModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "Update or delete could not be executed, for example because the case instance does not exist."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/case-instance/{id}/variables/{varId}/data": {
      "get": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getCaseInstanceGetVariablesResourceGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getCaseInstanceGetVariablesResourceSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-instance/{id}/variables/{varId}": {
      "get": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getCaseInstanceGetVariablesResourceGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getCaseInstanceGetVariablesResourcePutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getCaseInstanceGetVariablesResourceDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/case-instance/{id}/terminate": {
      "post": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Performs a transition from ACTIVE state to TERMINATED state",
        "description": "Performs a transition from ACTIVE state to TERMINATED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId": "getCaseInstanceTerminate",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case instance is not in the active state. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case instance cannot be terminated because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case instance with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-instance/{id}/close": {
      "post": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Performs a transition from COMPLETED state to CLOSED state",
        "description": "Performs a transition from COMPLETED state to CLOSED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId": "getCaseInstanceClose",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case instance is active. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case instance cannot be closed because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case instance with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-instance/{id}/complete": {
      "post": {
        "tags": [
          "Case Instance"
        ],
        "summary": "Performs a transition from ACTIVE state to COMPLETED state",
        "description": "Performs a transition from ACTIVE state to COMPLETED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).",
        "operationId": "getCaseInstanceComplete",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter caseExecutionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CaseExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The state transition is not allowed to be performed, for example when the case instance is already completed. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The case instance cannot be completed because of CMMN restrictions. See the Introduction for the error response format."
          },
          "404": {
            "description": "The case instance with given id is not found. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-instance/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Retrieves a case instance by id, according to the `CaseInstance` interface in the engine",
        "description": "Retrieves a case instance by id, according to the `CaseInstance` interface in the engine.",
        "operationId": "getHistoricCaseInstanceGetHistoricCaseInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Case instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/diagram": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Get Decision Definition Diagram",
        "description": "Get Decision Definition Diagram",
        "operationId": "getDecisionDefinitionByKeyAndTenantIdGetDecisionDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-definition/count": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Requests the number of decision definitions that fulfill the query criteria",
        "description": "Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Decision Definitions method.",
        "operationId": "getDecisionDefinitionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/decision-definition": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Queries for decision definitions that fulfill given parameters",
        "description": "Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version.  The size of the result set can be retrieved by using the Get Decision Definition Count method.",
        "operationId": "getDecisionDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DecisionDefinitionDto"
              }
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/evaluate": {
      "post": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Evaluate Decision",
        "description": "Evaluate Decision",
        "operationId": "getDecisionDefinitionByKeyAndTenantIdEvaluateDecision",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter evaluateDecisionDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EvaluateDecisionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Get Decision Definition",
        "description": "Get Decision Definition",
        "operationId": "getDecisionDefinitionByKeyAndTenantIdGetDecisionDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionDefinitionDto"
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live": {
      "put": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Update History Time To Live",
        "description": "Update History Time To Live",
        "operationId": "getDecisionDefinitionByKeyAndTenantIdUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-definition/{id}/diagram": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Retrieves the diagram of a decision definition",
        "description": "Retrieves the diagram of a decision definition.",
        "operationId": "getDecisionDefinitionByIdGetDecisionDefinitionDiagram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/xml": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Get Decision Definition Dmn Xml",
        "description": "Get Decision Definition Dmn Xml",
        "operationId": "getDecisionDefinitionByKeyGetDecisionDefinitionDmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/decision-definition/{id}/xml": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Retrieves the DMN XML of a decision definition",
        "description": "Retrieves the DMN XML of a decision definition.",
        "operationId": "getDecisionDefinitionByIdGetDecisionDefinitionDmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/diagram": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Get Decision Definition Diagram",
        "description": "Get Decision Definition Diagram",
        "operationId": "getDecisionDefinitionByKeyGetDecisionDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/history-time-to-live": {
      "put": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Update History Time To Live",
        "description": "Update History Time To Live",
        "operationId": "getDecisionDefinitionByKeyUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-definition/key/{key}/tenant-id/{tenantId}/xml": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Get Decision Definition Dmn Xml",
        "description": "Get Decision Definition Dmn Xml",
        "operationId": "getDecisionDefinitionByKeyAndTenantIdGetDecisionDefinitionDmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/decision-definition/key/{key}/evaluate": {
      "post": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Evaluate Decision",
        "description": "Evaluate Decision",
        "operationId": "getDecisionDefinitionByKeyEvaluateDecision",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter evaluateDecisionDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EvaluateDecisionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/{id}": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine",
        "description": "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
        "operationId": "getDecisionDefinitionByIdGetDecisionDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionDefinitionDto"
            }
          }
        }
      }
    },
    "/decision-definition/{id}/evaluate": {
      "post": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Evaluates a given decision and returns the result",
        "description": "Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.",
        "operationId": "getDecisionDefinitionByIdEvaluateDecision",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter evaluateDecisionDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EvaluateDecisionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/decision-definition/{id}/history-time-to-live": {
      "put": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Updates history time to live for decision definition",
        "description": "Updates history time to live for decision definition. The field is used within History cleanup.",
        "operationId": "getDecisionDefinitionByIdUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Decision definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/decision-definition/key/{key}": {
      "get": {
        "tags": [
          "Decision Definition"
        ],
        "summary": "Get Decision Definition",
        "description": "Get Decision Definition",
        "operationId": "getDecisionDefinitionByKeyGetDecisionDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionDefinitionDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Queries for decision requirements definitions that fulfill given parameters",
        "description": "Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the Get Decision Requirements Definition Count method.",
        "operationId": "getDecisionRequirementsDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DecisionRequirementsDefinitionDto"
              }
            }
          }
        }
      }
    },
    "/decision-requirements-definition/count": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Requests the number of decision requirements definitions that fulfill the query criteria",
        "description": "Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Decision Requirements Definitions method.",
        "operationId": "getDecisionRequirementsDefinitionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/{id}": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine",
        "description": "Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.",
        "operationId": "getDecisionRequirementsDefinitionByIdGetDecisionRequirementsDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionRequirementsDefinitionDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/{id}/diagram": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Retrieves the diagram of a decision requirements definition",
        "description": "Retrieves the diagram of a decision requirements definition.",
        "operationId": "getDecisionRequirementsDefinitionByIdGetDecisionRequirementsDefinitionDiagram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-requirements-definition/key/{key}": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Get Decision Requirements Definition",
        "description": "Get Decision Requirements Definition",
        "operationId": "getDecisionRequirementsDefinitionByKeyGetDecisionRequirementsDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionRequirementsDefinitionDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/key/{key}/xml": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Get Decision Requirements Definition Dmn Xml",
        "description": "Get Decision Requirements Definition Dmn Xml",
        "operationId": "getDecisionRequirementsDefinitionByKeyGetDecisionRequirementsDefinitionDmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionRequirementsDefinitionXmlDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/{id}/xml": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Retrieves the DMN XML of a decision requirements definition",
        "description": "Retrieves the DMN XML of a decision requirements definition.",
        "operationId": "getDecisionRequirementsDefinitionByIdGetDecisionRequirementsDefinitionDmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionRequirementsDefinitionXmlDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/key/{key}/diagram": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Get Decision Requirements Definition Diagram",
        "description": "Get Decision Requirements Definition Diagram",
        "operationId": "getDecisionRequirementsDefinitionByKeyGetDecisionRequirementsDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Get Decision Requirements Definition Diagram",
        "description": "Get Decision Requirements Definition Diagram",
        "operationId": "getDecisionRequirementsDefinitionByKeyAndTenantIdGetDecisionRequirementsDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Get Decision Requirements Definition Dmn Xml",
        "description": "Get Decision Requirements Definition Dmn Xml",
        "operationId": "getDecisionRequirementsDefinitionByKeyAndTenantIdGetDecisionRequirementsDefinitionDmnXml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionRequirementsDefinitionXmlDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}": {
      "get": {
        "tags": [
          "Decision Requirement Definition Execution"
        ],
        "summary": "Get Decision Requirements Definition",
        "description": "Get Decision Requirements Definition",
        "operationId": "getDecisionRequirementsDefinitionByKeyAndTenantIdGetDecisionRequirementsDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecisionRequirementsDefinitionDto"
            }
          }
        }
      }
    },
    "/deployment/{id}": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Retrieves a deployment by id, according to the `Deployment` interface of the engine",
        "description": "Retrieves a deployment by id, according to the `Deployment` interface of the engine.",
        "operationId": "getDeploymentGetDeployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Deployment with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete": {
        "tags": [
          "Deployment"
        ],
        "summary": "Deletes a deployment by id",
        "description": "Deletes a deployment by id.",
        "operationId": "getDeploymentDeleteDeployment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Deployment with id 'aDeploymentId' does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/redeploy": {
      "post": {
        "tags": [
          "Deployment"
        ],
        "summary": "Re-deploys an existing deployment",
        "description": "Re-deploys an existing deployment.",
        "operationId": "getDeploymentRedeploy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter redeploymentDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RedeploymentDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Deployment or a deployment resource for the given deployment does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/create": {
      "post": {
        "tags": [
          "Deployment"
        ],
        "summary": "Creates a deployment",
        "description": "Creates a deployment.",
        "operationId": "createDeployment_1",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/deployment/count": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Queries for the number of deployments that fulfill given parameters",
        "description": "Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the Get Deployments method.",
        "operationId": "getDeploymentsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Queries for deployments that fulfill given parameters",
        "description": "Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the Get Deployment count method.",
        "operationId": "getDeployments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/resources/{resourceId}/data": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Retrieves the binary content of a deployment resource for the given deployment by id",
        "description": "Retrieves the binary content of a deployment resource for the given deployment by id.",
        "operationId": "getDeploymentGetDeploymentResourcesGetDeploymentResourceData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Parameter resourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The media type of the response depends on the filename. For example a process.bpmn resource will have the media type application/xml. If the filetype is unknown it defaults to application/octet-stream."
          },
          "404": {
            "description": "Deployment Resource with given resource id or deployment id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/resources/{resourceId}": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Retrieves a deployment resource by resource id for the given deployment",
        "description": "Retrieves a deployment resource by resource id for the given deployment.",
        "operationId": "getDeploymentGetDeploymentResourcesGetDeploymentResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Parameter resourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Deployment Resource with given resource id or deployment id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/deployment/{id}/resources": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Retrieves all deployment resources of a given deployment",
        "description": "Retrieves all deployment resources of a given deployment.",
        "operationId": "getDeploymentGetDeploymentResourcesGetDeploymentResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Deployment resources for the given deployment do not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Retrieves an execution by id, according to the `Execution` interface in the engine",
        "description": "Retrieves an execution by id, according to the `Execution` interface in the engine.",
        "operationId": "getExecutionGetExecution",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/localVariables": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Retrieves all variables of a given execution by id",
        "description": "Retrieves all variables of a given execution by id.",
        "operationId": "getExecutionGetLocalVariablesGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Updates or deletes the variables in the context of an execution by id",
        "description": "Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.",
        "operationId": "getExecutionGetLocalVariablesModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "Update or delete could not be executed, for example because the execution does not exist."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/execution/{id}/localVariables/{varId}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getExecutionGetLocalVariablesGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Execution"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getExecutionGetLocalVariablesPutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Execution"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getExecutionGetLocalVariablesDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/execution": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Queries for the executions that fulfill given parameters",
        "description": "Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get Execution Count method.",
        "operationId": "getExecutions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Queries for executions that fulfill given parameters through a JSON object",
        "description": "Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Executions method because it allows to filter by multiple instance and execution variables of types `String`, `Number` or `Boolean`.",
        "operationId": "queryExecutions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter executionQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExecutionQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/messageSubscriptions/{messageName}": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Retrieves a message event subscription for a given execution by id and a message name",
        "description": "Retrieves a message event subscription for a given execution by id and a message name.",
        "operationId": "getExecutionGetMessageEventSubscriptionGetEventSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageName",
            "in": "path",
            "description": "Parameter messageName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "A message subscription for the given name and execution does not exist. This may either mean that the execution does not exist, or that it is not subscribed on such a message. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/messageSubscriptions/{messageName}/trigger": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Delivers a message to a specific execution by id, to trigger an existing message event subscription",
        "description": "Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message's payload.",
        "operationId": "getExecutionGetMessageEventSubscriptionTriggerEvent",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageName",
            "in": "path",
            "description": "Parameter messageName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter executionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "The addressed execution has no pending message subscriptions for the given message. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/execution/count": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Queries for the number of executions that fulfill given parameters",
        "description": "Queries for the number of executions that fulfill given parameters. Takes the same parameters as the Get Executions method.",
        "operationId": "getExecutionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Queries for the number of executions that fulfill given parameters",
        "description": "Queries for the number of executions that fulfill given parameters. This method takes the same message body as the Get Executions (POST) method and therefore it is slightly more powerful than the Get Execution Count method.",
        "operationId": "queryExecutionsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter executionQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExecutionQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/execution/{id}/signal": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Signals an execution by id",
        "description": "Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.",
        "operationId": "getExecutionSignalExecution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter executionTriggerDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExecutionTriggerDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/execution/{id}/localVariables/{varId}/data": {
      "get": {
        "tags": [
          "Execution"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getExecutionGetLocalVariablesGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getExecutionGetLocalVariablesSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/external-task/count": {
      "get": {
        "tags": [
          "External"
        ],
        "summary": "Queries for the number of external tasks that fulfill given parameters",
        "description": "Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the Get External Tasks method.",
        "operationId": "getExternalTasksCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Queries for the number of external tasks that fulfill given parameters",
        "description": "Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the Get External Tasks (POST) method.",
        "operationId": "queryExternalTasksCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter externalTaskQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalTaskQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task": {
      "get": {
        "tags": [
          "External"
        ],
        "summary": "Queries for the external tasks that fulfill given parameters",
        "description": "Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get External Task Count method.",
        "operationId": "getExternalTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Queries for external tasks that fulfill given parameters in the form of a JSON object",
        "description": "Queries for external tasks that fulfill given parameters in the form of a JSON object. This method is slightly more powerful than the Get External Tasks method because it allows to specify a hierarchical result sorting.",
        "operationId": "queryExternalTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter externalTaskQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalTaskQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/complete": {
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Completes an external task by id and updates process variables",
        "description": "Completes an external task by id and updates process variables.",
        "operationId": "getExternalTaskComplete",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter completeExternalTaskDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompleteExternalTaskDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format."
          },
          "500": {
            "description": "Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/bpmnError": {
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Reports a business error in the context of a running external task by id",
        "description": "Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.",
        "operationId": "getExternalTaskHandleBpmnError",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter externalTaskBpmnError",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalTaskBpmnError"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format."
          },
          "500": {
            "description": "Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/retries": {
      "put": {
        "tags": [
          "External"
        ],
        "summary": "Sets the number of retries left to execute an external task by id",
        "description": "Sets the number of retries left to execute an external task by id. If retries are set to 0, an incident is created.",
        "operationId": "getExternalTaskSetRetries",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter retriesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RetriesDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "In case the number of retries is negative, an exception of type InvalidRequestException is returned. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/priority": {
      "put": {
        "tags": [
          "External"
        ],
        "summary": "Sets the priority of an existing external task by id",
        "description": "Sets the priority of an existing external task by id. The default value of a priority is 0.",
        "operationId": "getExternalTaskSetPriority",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter priorityDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PriorityDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/failure": {
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Reports a failure to execute an external task by id",
        "description": "Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.",
        "operationId": "getExternalTaskHandleFailure",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter externalTaskFailureDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalTaskFailureDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if the task's most recent lock was not acquired by the provided worker. See the Introduction for the error response format."
          },
          "500": {
            "description": "Returned if the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}": {
      "get": {
        "tags": [
          "External"
        ],
        "summary": "Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine",
        "description": "Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.",
        "operationId": "getExternalTaskGetExternalTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "External task with the given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/{id}/errorDetails": {
      "get": {
        "tags": [
          "External"
        ],
        "summary": "Get Error Details",
        "description": "Get Error Details",
        "operationId": "getExternalTaskGetErrorDetails",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/external-task/{id}/unlock": {
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Unlocks an external task by id",
        "description": "Unlocks an external task by id. Clears the task's lock expiration time and worker id.",
        "operationId": "getExternalTaskUnlock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/fetchAndLock": {
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Fetches and locks a specific number of external tasks for execution by a worker",
        "description": "Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.",
        "operationId": "fetchAndLock",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter fetchExternalTasksDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FetchExternalTasksDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Returned if fetching is not successful, for example due to missing parameters. See the Introduction for the error response format."
          }
        }
      }
    },
    "/external-task/retries-async": {
      "post": {
        "tags": [
          "External"
        ],
        "summary": "Sets the number of retries left to execute external tasks by id asynchronously",
        "description": "Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.",
        "operationId": "setRetriesAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter setRetriesForExternalTasksDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SetRetriesForExternalTasksDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "If neither externalTaskIds nor externalTaskQuery are present or externalTaskIds contains null value or the number of retries is negative, an exception of type InvalidRequestException is returned. See the Introduction for the error response format."
          },
          "404": {
            "description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.g., due to a caught BPMN boundary event. See the Introduction for the error response format."
          }
        }
      }
    },
    "/filter/{id}/list": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Executes the saved query of the filter by id and returns the result list",
        "description": "Executes the saved query of the filter by id and returns the result list.",
        "operationId": "getFilterExecuteList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. In case of an expected HAL response."
          },
          "403": {
            "description": "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Executes the saved query of the filter by id and returns the result list",
        "description": "Executes the saved query of the filter by id and returns the result list. This method is slightly more powerful then the Get Execute Filter List method because it allows to extend the saved query of the filter.",
        "operationId": "getFilterQueryList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/filter/{id}/count": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Executes the saved query of the filter by id and returns the count",
        "description": "Executes the saved query of the filter by id and returns the count.",
        "operationId": "getFilterExecuteCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "403": {
            "description": "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Executes the saved query of the filter by id and returns the count",
        "description": "Executes the saved query of the filter by id and returns the count. This method is slightly more powerful then the Get Execute Filter Count method because it allows to extend the saved query of the filter.",
        "operationId": "getFilterQueryCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "The extending query was invalid. See the Introduction for the error response format."
          },
          "403": {
            "description": "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/filter/{id}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieves a single filter by id, according to the `Filter` interface in the engine",
        "description": "Retrieves a single filter by id, according to the `Filter` interface in the engine.",
        "operationId": "getFilterGetFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "Parameter itemCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "403": {
            "description": "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Updates an existing filter",
        "description": "Updates an existing filter.",
        "operationId": "getFilterUpdateFilter",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter filterDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Filter was invalid. See Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The authenticated user is unauthorized to update this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Deletes a filter by id",
        "description": "Deletes a filter by id.",
        "operationId": "getFilterDeleteFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The authenticated user is unauthorized to delete this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Filter"
        ],
        "summary": "Available Operations",
        "description": "Available Operations",
        "operationId": "getFilterAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/filter/{id}/singleResult": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Executes the saved query of the filter by id and returns the single result",
        "description": "Executes the saved query of the filter by id and returns the single result.",
        "operationId": "getFilterExecuteSingleResult",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. In case of an expected HAL response."
          },
          "400": {
            "description": "The executed filter returned more than one single result. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful, but the result was empty."
          },
          "403": {
            "description": "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Executes the saved query of the filter by id and returns the single result",
        "description": "Executes the saved query of the filter by id and returns the single result. This method is slightly more powerful then the Get Execute Filter Single Result method because it allows to extend the saved query of the filter.",
        "operationId": "getFilterQuerySingleResult",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. In case of an expected HAL response."
          },
          "400": {
            "description": "The executed filter returned more than one single result or the extending query was invalid. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful, but the result was empty."
          },
          "403": {
            "description": "The authenticated user is unauthorized to read this filter. See the Introduction for the error response format."
          },
          "404": {
            "description": "Filter with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/filter": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Queries for a list of filters using a list of parameters",
        "description": "Queries for a list of filters using a list of parameters. The size of the result set can be retrieved by using the Get Filter Count method.",
        "operationId": "getFilters",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemCount",
            "in": "query",
            "description": "Parameter itemCount",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Filter"
        ],
        "summary": "The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances",
        "description": "The `/filter` resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the `/filter` resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "availableOperations_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/filter/create": {
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Creates a new filter",
        "description": "Creates a new filter.",
        "operationId": "createFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter filterDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FilterDto"
            }
          }
        }
      }
    },
    "/filter/count": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Retrieves the number of filters that fulfill a provided query",
        "description": "Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set when using the Get Filters method.",
        "operationId": "getFiltersCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/group/create": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Creates a new group",
        "description": "Creates a new group.",
        "operationId": "createGroup",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter groupDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The group could not be created due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          }
        }
      }
    },
    "/group/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Retrieves a group by id",
        "description": "Retrieves a group by id.",
        "operationId": "getGroupGetGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Group with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Updates a given group by id",
        "description": "Updates a given group by id.",
        "operationId": "getGroupUpdateGroup",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter groupDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The group could not be updated due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404": {
            "description": "If the group with the requested Id cannot be found."
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Deletes a group by id",
        "description": "Deletes a group by id.",
        "operationId": "getGroupDeleteGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404": {
            "description": "Group cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Group"
        ],
        "summary": "Available Operations",
        "description": "Available Operations",
        "operationId": "getGroupAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries for a list of groups using a list of parameters",
        "description": "Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the Get Group Count method.",
        "operationId": "queryGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Group"
        ],
        "summary": "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances",
        "description": "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "availableOperations_2",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/group/{id}/members/{userId}": {
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Adds a member to a group",
        "description": "Adds a member to a group.",
        "operationId": "getGroupGetGroupMembersResourceCreateGroupMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Parameter userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "In case an internal error occurs. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Removes a member from a group",
        "description": "Removes a member from a group.",
        "operationId": "getGroupGetGroupMembersResourceDeleteGroupMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Parameter userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "In case an error occurs. See the Introduction for the error response format."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          }
        }
      }
    },
    "/group/{id}/members": {
      "options": {
        "tags": [
          "Group"
        ],
        "summary": "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource",
        "description": "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "getGroupGetGroupMembersResourceAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/group/count": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries for groups using a list of parameters and retrieves the count",
        "description": "Queries for groups using a list of parameters and retrieves the count.",
        "operationId": "getGroupCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/activity-instance/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Activity Instance",
        "description": "Get Historic Activity Instance",
        "operationId": "getHistoricCaseInstanceGetHistoricActivityInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricActivityInstanceDto"
            }
          }
        }
      }
    },
    "/activity-instance": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Activity Instances",
        "description": "Get Historic Activity Instances",
        "operationId": "getHistoricActivityInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricActivityInstanceDto"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Query Historic Activity Instances",
        "description": "Query Historic Activity Instances",
        "operationId": "queryHistoricActivityInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicActivityInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricActivityInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricActivityInstanceDto"
              }
            }
          }
        }
      }
    },
    "/activity-instance/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Activity Instances Count",
        "description": "Get Historic Activity Instances Count",
        "operationId": "getHistoricActivityInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Query Historic Activity Instances Count",
        "description": "Query Historic Activity Instances Count",
        "operationId": "queryHistoricActivityInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicActivityInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricActivityInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/process-definition/{id}/statistics": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves runtime statistics of a given process definition, grouped by activities",
        "description": "Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.\n Note: This does not include historic data.",
        "operationId": "getProcessDefinitionByIdGetActivityStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "failedJobs",
            "in": "query",
            "description": "Parameter failedJobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidents",
            "in": "query",
            "description": "Parameter incidents",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidentsForType",
            "in": "query",
            "description": "Parameter incidentsForType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "If both query parameters incidents and incidentsForType were set. See the Introduction for the error response format."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/case-activity-instance": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Case Activity Instances",
        "description": "Get Historic Case Activity Instances",
        "operationId": "getHistoricCaseActivityInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricCaseActivityInstanceDto"
              }
            }
          }
        }
      }
    },
    "/case-activity-instance/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Case Activity Instance",
        "description": "Get Historic Case Activity Instance",
        "operationId": "getHistoricCaseInstanceGetHistoricCaseActivityInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricCaseActivityInstanceDto"
            }
          }
        }
      }
    },
    "/case-activity-instance/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Case Activity Instances Count",
        "description": "Get Historic Case Activity Instances Count",
        "operationId": "getHistoricCaseActivityInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/case-definition/{id}/statistics": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Case Activity Statistics",
        "description": "Get Historic Case Activity Statistics",
        "operationId": "getHistoricCaseActivityStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricCaseActivityStatisticsDto"
              }
            }
          }
        }
      }
    },
    "/decision-instance/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Decision Instance",
        "description": "Get Historic Decision Instance",
        "operationId": "getHistoricDecisionInstanceGetHistoricDecisionInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeInputs",
            "in": "query",
            "description": "Parameter includeInputs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeOutputs",
            "in": "query",
            "description": "Parameter includeOutputs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disableBinaryFetching",
            "in": "query",
            "description": "Parameter disableBinaryFetching",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disableCustomObjectDeserialization",
            "in": "query",
            "description": "Parameter disableCustomObjectDeserialization",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricDecisionInstanceDto"
            }
          }
        }
      }
    },
    "/decision-instance": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Decision Instances",
        "description": "Get Historic Decision Instances",
        "operationId": "getHistoricDecisionInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricDecisionInstanceDto"
              }
            }
          }
        }
      }
    },
    "/decision-instance/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Decision Instances Count",
        "description": "Get Historic Decision Instances Count",
        "operationId": "getHistoricDecisionInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/decision-requirements-definition/{id}/statistics": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Decision Statistics",
        "description": "Get Decision Statistics",
        "operationId": "getDecisionStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "decisionInstanceId",
            "in": "query",
            "description": "Parameter decisionInstanceId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricDecisionInstanceStatisticsDto"
              }
            }
          }
        }
      }
    },
    "/detail/{id}/data": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Resource Binary",
        "description": "Get Resource Binary",
        "operationId": "historicDetailGetResourceBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/detail/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Resource",
        "description": "Get Resource",
        "operationId": "historicDetailGetResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricDetailDto"
            }
          }
        }
      }
    },
    "/detail/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Details Count",
        "description": "Get Historic Details Count",
        "operationId": "getHistoricDetailsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/detail": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Details",
        "description": "Get Historic Details",
        "operationId": "getHistoricDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricDetailDto"
              }
            }
          }
        }
      }
    },
    "/external-task-log/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic External Task Logs Count",
        "description": "Get Historic External Task Logs Count",
        "operationId": "getHistoricExternalTaskLogsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Query Historic External Task Logs Count",
        "description": "Query Historic External Task Logs Count",
        "operationId": "queryHistoricExternalTaskLogsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicExternalTaskLogQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricExternalTaskLogQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/external-task-log": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic External Task Logs",
        "description": "Get Historic External Task Logs",
        "operationId": "getHistoricExternalTaskLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricExternalTaskLogDto"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Query Historic External Task Logs",
        "description": "Query Historic External Task Logs",
        "operationId": "queryHistoricExternalTaskLogs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicExternalTaskLogQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricExternalTaskLogQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricExternalTaskLogDto"
              }
            }
          }
        }
      }
    },
    "/external-task-log/{id}/error-details": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Error Details",
        "description": "Get Error Details",
        "operationId": "getHistoricExternalTaskLogGetErrorDetails",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/external-task-log/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic External Task Log",
        "description": "Get Historic External Task Log",
        "operationId": "getHistoricExternalTaskLogGetHistoricExternalTaskLog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricExternalTaskLogDto"
            }
          }
        }
      }
    },
    "/identity-link-log": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Identity Links",
        "description": "Get Historic Identity Links",
        "operationId": "getHistoricIdentityLinks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricIdentityLinkLogDto"
              }
            }
          }
        }
      }
    },
    "/identity-link-log/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Identity Links Count",
        "description": "Get Historic Identity Links Count",
        "operationId": "getHistoricIdentityLinksCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/incident/count": {
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Queries for the number of incidents that fulfill given parameters",
        "description": "Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the Get Incidents method.",
        "operationId": "getIncidentsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/incident": {
      "get": {
        "tags": [
          "Incident"
        ],
        "summary": "Queries for incidents that fulfill given parameters",
        "description": "Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the Get Incident Count method.",
        "operationId": "getIncidents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IncidentDto"
              }
            }
          }
        }
      }
    },
    "/job-log": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Job Logs",
        "description": "Get Historic Job Logs",
        "operationId": "getHistoricJobLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricJobLogDto"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Query Historic Job Logs",
        "description": "Query Historic Job Logs",
        "operationId": "queryHistoricJobLogs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicJobLogQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricJobLogQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricJobLogDto"
              }
            }
          }
        }
      }
    },
    "/job-log/count": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Job Logs Count",
        "description": "Get Historic Job Logs Count",
        "operationId": "getHistoricJobLogsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Historic"
        ],
        "summary": "Query Historic Job Logs Count",
        "description": "Query Historic Job Logs Count",
        "operationId": "queryHistoricJobLogsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historicJobLogQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricJobLogQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/job-log/{id}/stacktrace": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Stacktrace",
        "description": "Get Stacktrace",
        "operationId": "getHistoricJobLogGetStacktrace",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/job-log/{id}": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Job Log",
        "description": "Get Historic Job Log",
        "operationId": "getHistoricJobLogGetHistoricJobLog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HistoricJobLogDto"
            }
          }
        }
      }
    },
    "/process-instance/delete": {
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Deletes multiple process instances asynchronously (batch)",
        "description": "Deletes multiple process instances asynchronously (batch).",
        "operationId": "deleteAsync_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter deleteProcessInstancesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteProcessInstancesDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/{id}": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine",
        "description": "Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.",
        "operationId": "getProcessInstanceGetProcessInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Deletes a running process instance by id",
        "description": "Deletes a running process instance by id.",
        "operationId": "getProcessInstanceDeleteProcessInstance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "skipCustomListeners",
            "in": "query",
            "description": "Parameter skipCustomListeners",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skipIoMappings",
            "in": "query",
            "description": "Parameter skipIoMappings",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/count": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Queries for the number of process instances that fulfill given parameters",
        "description": "Queries for the number of process instances that fulfill given parameters. Takes the same parameters as the Get Instances method.",
        "operationId": "getProcessInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Queries for the number of process instances that fulfill the given parameters",
        "description": "Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) and therefore it is slightly more powerful than the Get Instance Count method.",
        "operationId": "queryProcessInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Queries for process instances that fulfill given parameters",
        "description": "Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.",
        "operationId": "getProcessInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Queries for process instances that fulfill given parameters through a JSON object",
        "description": "Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.",
        "operationId": "queryProcessInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/report": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Process Instances Report",
        "description": "Get Historic Process Instances Report",
        "operationId": "getHistoricProcessInstancesReport",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/report": {
      "get": {
        "tags": [
          "Historic"
        ],
        "summary": "Get Historic Task Instance Report",
        "description": "Get Historic Task Instance Report",
        "operationId": "getHistoricTaskInstanceReport",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Queries for tasks that fulfill a given filter",
        "description": "Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.",
        "operationId": "getTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. In case of an expected HAL response."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Queries for tasks that fulfill a given filter",
        "description": "Queries for tasks that fulfill a given filter. This method is slightly more powerful than the Get Tasks method because it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`. The size of the result set can be retrieved by using the Get Task Count (POST) method.",
        "operationId": "queryTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter taskQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/count": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the number of tasks that fulfill a provided filter",
        "description": "Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the Get Tasks method.",
        "operationId": "getTasksCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the number of tasks that fulfill the given filter",
        "description": "Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the Get Tasks (POST) method and takes the same parameters.",
        "operationId": "queryTasksCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter taskQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance/{id}/data": {
      "get": {
        "tags": [
          "Variable"
        ],
        "summary": "Retrieves the content of a variable by id",
        "description": "Retrieves the content of a variable by id. Applicable for byte array and file variables.",
        "operationId": "getVariableInstanceGetResourceBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/variable-instance/{id}": {
      "get": {
        "tags": [
          "Variable"
        ],
        "summary": "Retrieves a variable by id",
        "description": "Retrieves a variable by id.",
        "operationId": "getVariableInstanceGetResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Variable with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance": {
      "get": {
        "tags": [
          "Variable"
        ],
        "summary": "Query for variable instances that fulfill given parameters",
        "description": "Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the Get Variable Instance Count method.",
        "operationId": "getVariableInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Variable"
        ],
        "summary": "Query for variable instances that fulfill given parameters through a JSON object",
        "description": "Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Variable Instances method because it allows filtering by multiple variable instances of types `String`, `Number` or `Boolean`.",
        "operationId": "queryVariableInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/variable-instance/count": {
      "get": {
        "tags": [
          "Variable"
        ],
        "summary": "Query for the number of variable instances that fulfill given parameters",
        "description": "Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the Get Variable Instances method.",
        "operationId": "getVariableInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Variable"
        ],
        "summary": "Query for the number of variable instances that fulfill given parameters",
        "description": "Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the Get Variable Instances (POST) method and therefore it is slightly more powerful than the Get Variable Instance Count method.",
        "operationId": "queryVariableInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableInstanceQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/history/batch/batch/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricBatchesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/batch/batch": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricBatches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricBatchDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/cleanup": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Schedules asynchronous history cleanup (See History cleanup)",
        "description": "Schedules asynchronous history cleanup (See History cleanup).",
        "operationId": "cleanupAsync",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "immediatelyDue",
            "in": "query",
            "description": "Parameter immediatelyDue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid."
          }
        }
      }
    },
    "/history/detail/variable-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricDetailsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/detail/variable-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricDetailDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/job-log/job-log": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricJobLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricJobLogDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricJobLogs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricJobLogQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricJobLogDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/job-log/job-log/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricJobLogsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricJobLogsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricJobLogQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/user-operation/user-operation/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "queryUserOperationCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/user-operation/user-operation": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "queryUserOperationEntries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserOperationLogEntryDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/activity-instance/activity-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricActivityInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricActivityInstanceDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricActivityInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricActivityInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricActivityInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/activity-instance/activity-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricActivityInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricActivityInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricActivityInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/case-activity-instance/case-activity-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricCaseActivityInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricCaseActivityInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/case-activity-instance/case-activity-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricCaseActivityInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/process-definition/{id}/statistics/process-definition/{id}/statistics": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricActivityStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "canceled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "finished",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "completeScope",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricActivityStatisticsDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/case-definition/{id}/statistics/case-definition/{id}/statistics": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricCaseActivityStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricCaseActivityStatisticsDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/case-instance/case-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricCaseInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricCaseInstanceDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricCaseInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricCaseInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricCaseInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/case-instance/case-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricCaseInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricCaseInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricCaseInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/decision-requirements-definition/decision-requirements-definition/{id}/statistics": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getDecisionStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "decisionInstanceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricDecisionInstanceStatisticsDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/identity-link-log/identity-link-log": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricIdentityLinks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricIdentityLinkLogDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/identity-link-log/identity-link-log/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricIdentityLinksCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/external-task-log/external-task-log/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricExternalTaskLogsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricExternalTaskLogsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricExternalTaskLogQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/external-task-log/external-task-log": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricExternalTaskLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricExternalTaskLogDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricExternalTaskLogs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricExternalTaskLogQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricExternalTaskLogDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/task/variable-instance/report": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricTaskInstanceReport",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/history/task/variable-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricTaskInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricTaskInstanceDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricTaskInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricTaskInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricTaskInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/task/variable-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricTaskInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricTaskInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricTaskInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/decision-instance/decision-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricDecisionInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricDecisionInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/decision-instance/decision-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricDecisionInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/incident/incident/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricIncidentsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/incident/incident": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricIncidents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricIncidentDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/process-instance/process-instance/delete": {
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "deleteAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteHistoricProcessInstancesDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/process-instance/process-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricProcessInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricProcessInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricProcessInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/history/process-instance/process-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricProcessInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricProcessInstanceDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricProcessInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricProcessInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricProcessInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/process-instance/process-instance/report": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricProcessInstancesReport",
        "produces": [
          "application/json",
          "text/csv",
          "application/csv"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/history/variable-instance/variable-instance": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricVariableInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricVariableInstanceDto"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricVariableInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricVariableInstanceQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistoricVariableInstanceDto"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/history/variable-instance/variable-instance/count": {
      "get": {
        "tags": [
          "History"
        ],
        "operationId": "getHistoricVariableInstancesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "History"
        ],
        "operationId": "queryHistoricVariableInstancesCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoricVariableInstanceQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            },
            "headers": {}
          }
        }
      }
    },
    "/identity/verify": {
      "post": {
        "tags": [
          "Identity"
        ],
        "summary": "Verifies that user credentials are valid",
        "description": "Verifies that user credentials are valid.",
        "operationId": "verifyUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter basicUserCredentialsDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BasicUserCredentialsDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "If body does not contain username or password."
          }
        }
      }
    },
    "/identity/groups": {
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "Gets the groups of a user by id and includes all users that share a group with the given user",
        "description": "Gets the groups of a user by id and includes all users that share a group with the given user.",
        "operationId": "getGroupInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Parameter userId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "If the userId query parameter is missing. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/suspended": {
      "put": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Activates or suspends job definitions with the given process definition id",
        "description": "Activates or suspends job definitions with the given process definition id.",
        "operationId": "updateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobDefinitionSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobDefinitionSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format or if the processDefinitionId parameter is null. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/job-definition/{id}": {
      "get": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Retrieves a job definition by id, according to the `JobDefinition` interface in the engine",
        "description": "Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.",
        "operationId": "getJobDefinitionGetJobDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/count": {
      "get": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Queries for the number of job definitions that fulfill given parameters",
        "description": "Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the Get Job Definitions method.",
        "operationId": "getJobDefinitionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Queries for the number of job definitions that fulfill given parameters",
        "description": "Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the Get Job Definitions (POST) method and therefore it is slightly more powerful than the Get Job Definition Count method.",
        "operationId": "queryJobDefinitionsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobDefinitionQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobDefinitionQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/{id}/retries": {
      "put": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Sets the number of retries of all failed jobs associated with the given job definition id",
        "description": "Sets the number of retries of all failed jobs associated with the given job definition id.",
        "operationId": "getJobDefinitionSetJobRetries",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter retriesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RetriesDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The retries could not be set successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/job-definition/{id}/jobPriority": {
      "put": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Sets an overriding execution priority for jobs with the given definition id",
        "description": "Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definition's existing jobs are updated accordingly. The priority can be reset by setting it to null, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the user guide on job prioritization for details.",
        "operationId": "getJobDefinitionSetJobPriority",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobDefinitionPriorityDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobDefinitionPriorityDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The retries could not be set successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition": {
      "get": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Queries for job definitions that fulfill given parameters",
        "description": "Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Definition Count method.",
        "operationId": "getJobDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Queries for job definitions that fulfill given parameters",
        "description": "Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the Get Job Definitions method because it allows filtering by multiple job definitions of types String, Number or Boolean.",
        "operationId": "queryJobDefinitions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobDefinitionQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobDefinitionQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job-definition/{id}/suspended": {
      "put": {
        "tags": [
          "Job Definition"
        ],
        "summary": "Activates or suspends a given job definition by id",
        "description": "Activates or suspends a given job definition by id.",
        "operationId": "getJobDefinitionUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobDefinitionSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobDefinitionSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/job/suspended": {
      "put": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Activates or suspends jobs with the given job definition id",
        "description": "Activates or suspends jobs with the given job definition id.",
        "operationId": "updateSuspensionState_1",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid, for example if the jobDefinitionId parameter is null. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/job/retries": {
      "post": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Create a batch to set retries of jobs asynchronously",
        "description": "Create a batch to set retries of jobs asynchronously.",
        "operationId": "setRetries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter setJobRetriesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SetJobRetriesDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if neither processInstanceIds nor processInstanceQuery is present. Or if the retry count is not specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/count": {
      "get": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Queries for the number of jobs that fulfill given parameters",
        "description": "Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the Get Jobs method.",
        "operationId": "getJobsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Queries for jobs that fulfill given parameters",
        "description": "Queries for jobs that fulfill given parameters. This method takes the same message body as the Get Jobs (POST) method and therefore it is slightly more powerful than the Get Job Count method.",
        "operationId": "queryJobsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobQueryDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for due date comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job": {
      "get": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Queries for jobs that fulfill given parameters",
        "description": "Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Count method.",
        "operationId": "getJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for due date comparison is used. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Queries for jobs that fulfill given parameters",
        "description": "Queries for jobs that fulfill given parameters. This method is slightly more powerful than the Get Jobs method because it allows filtering by multiple jobs of types String, Number or Boolean.",
        "operationId": "queryJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobQueryDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobQueryDto"
            }
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for due date comparison is used. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Retrieves a job by id, according to the `Job` interface in the engine",
        "description": "Retrieves a job by id, according to the `Job` interface in the engine.",
        "operationId": "getJobGetJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Deletes a job by id",
        "description": "Deletes a job by id.",
        "operationId": "getJobDeleteJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "The job could not be deleted. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/execute": {
      "post": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Executes a job by id",
        "description": "Executes a job by id. \nNote: The execution of the job happens synchronously in the same thread.",
        "operationId": "getJobExecuteJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "The job could not be executed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/suspended": {
      "put": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Activates or suspends a given job by id",
        "description": "Activates or suspends a given job by id.",
        "operationId": "getJobUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/job/{id}/duedate": {
      "put": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Updates the due date of a job by id",
        "description": "Updates the due date of a job by id.",
        "operationId": "getJobSetJobDuedate",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter jobDuedateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobDuedateDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The due date could not be set successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/priority": {
      "put": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Sets the execution priority of a job by id",
        "description": "Sets the execution priority of a job by id.",
        "operationId": "getJobSetJobPriority",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter priorityDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PriorityDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The priority could not be set successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/stacktrace": {
      "get": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Retrieves the exception stacktrace corresponding to the passed job id",
        "description": "Retrieves the exception stacktrace corresponding to the passed job id.",
        "operationId": "getJobGetStacktrace",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/job/{id}/retries": {
      "put": {
        "tags": [
          "Job Execution"
        ],
        "summary": "Sets the retries of the job to the given number of retries by id",
        "description": "Sets the retries of the job to the given number of retries by id.",
        "operationId": "getJobSetJobRetries",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter retriesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RetriesDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The retries could not be set successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Job with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/message": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event",
        "description": "Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event. Internally this maps to the engine's message correlation builder methods `MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`. For more information about the correlation behavior, see the Message Events section of the BPMN 2.0 Implementation Reference.",
        "operationId": "deliverMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter correlationMessageDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CorrelationMessageDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The property resultEnabled in the request body was true."
          },
          "400": {
            "description": "If no messageName was supplied. If both tenantId and withoutTenantId are supplied. If the message has not been correlated to exactly one entity (execution or process definition), or the variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful. The property resultEnabled in the request body was false (Default)."
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Retrieves a list of metrics, aggregated for a given interval",
        "description": "Retrieves a list of metrics, aggregated for a given interval.",
        "operationId": "interval",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid."
          }
        }
      }
    },
    "/metrics/{name}/sum": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Sum",
        "description": "Sum",
        "operationId": "getMetricsSum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Parameter name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetricsResultDto"
            }
          }
        }
      }
    },
    "/migration/generate": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "Generates a migration plan for two process definitions",
        "description": "Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.",
        "operationId": "generateMigrationPlan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter migrationPlanGenerationDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MigrationPlanGenerationDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MigrationPlanDto"
            }
          }
        }
      }
    },
    "/migration/execute": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "Executes a migration plan synchronously for multiple process instances",
        "description": "Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the Execute Migration Plan Async (Batch) method.",
        "operationId": "executeMigrationPlan",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter migrationExecutionDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MigrationExecutionDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/migration/validate": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "Validates a migration plan statically without executing it",
        "description": "Validates a migration plan statically without executing it. This corresponds to the creation time validation described in the user guide.",
        "operationId": "validateMigrationPlan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter migrationPlanDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MigrationPlanDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MigrationPlanReportDto"
            }
          }
        }
      }
    },
    "/migration/executeAsync": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "Executes a migration plan asynchronously (batch) for multiple process instances",
        "description": "Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the Execute Migration Plan method.",
        "operationId": "executeMigrationPlanAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter migrationExecutionDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MigrationExecutionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/modification/execute": {
      "post": {
        "tags": [
          "Modification"
        ],
        "summary": "Execute Modification",
        "description": "Execute Modification",
        "operationId": "executeModification",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter modificationDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ModificationDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/modification/executeAsync": {
      "post": {
        "tags": [
          "Modification"
        ],
        "summary": "Executes a modification asynchronously for multiple process instances",
        "description": "Executes a modification asynchronously for multiple process instances. To execute a modification synchronously, use the Execute Modification method.",
        "operationId": "executeModificationAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter modificationDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ModificationDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/count": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Requests the number of process definitions that fulfill the query criteria",
        "description": "Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Definitions method.",
        "operationId": "getProcessDefinitionsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/suspended": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Activates or suspends process definitions with the given process definition key",
        "description": "Activates or suspends process definitions with the given process definition key.",
        "operationId": "updateSuspensionState_2",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processDefinitionSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format or if the processDefinitionKey parameter is null. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/process-definition": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Queries for process definitions that fulfill given parameters",
        "description": "Queries for process definitions that fulfill given parameters. Parameters may be the properties of process definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Definition Count method.",
        "operationId": "getProcessDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/suspended": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Update Suspension State",
        "description": "Update Suspension State",
        "operationId": "getProcessDefinitionByKeyUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processDefinitionSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/restart": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Restart Process Instance",
        "description": "Restart Process Instance",
        "operationId": "getProcessDefinitionByKeyRestartProcessInstance",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter restartProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/history-time-to-live": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Update History Time To Live",
        "description": "Update History Time To Live",
        "operationId": "getProcessDefinitionByKeyUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/submit-form": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Submit Form",
        "description": "Submit Form",
        "operationId": "getProcessDefinitionByKeyAndTenantIdSubmitForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter startProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessInstanceDto"
            }
          }
        }
      }
    },
    "/process-definition/{id}/start": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Instantiates a given process definition",
        "description": "Instantiates a given process definition. Process variables and business key may be supplied in the request body.",
        "operationId": "getProcessDefinitionByIdStartProcessInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter startProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "The instance could not be created due to an invalid variable value, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "The instance could not be created successfully. See the Introduction for the error response format."
          },
          "404": {
            "description": "The instance could not be created due to a non existing process definition key. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Process Definition",
        "description": "Get Process Definition",
        "operationId": "getProcessDefinitionByKeyGetProcessDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionDto"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Delete Process Definition",
        "description": "Delete Process Definition",
        "operationId": "getProcessDefinitionByKeyDeleteProcessDefinition",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "in": "query",
            "description": "Parameter cascade",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skipCustomListeners",
            "in": "query",
            "description": "Parameter skipCustomListeners",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/startForm": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Start Form",
        "description": "Get Start Form",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetStartForm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FormDto"
            }
          }
        }
      }
    },
    "/process-definition/{id}/restart": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Restarts process instances that were canceled or terminated synchronously",
        "description": "Restarts process instances that were canceled or terminated synchronously. To execute the restart asynchronously, use the Restart Process Instance Async method.",
        "operationId": "getProcessDefinitionByIdRestartProcessInstance",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter restartProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/{id}/startForm": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves the key of the start form for a process definition",
        "description": "Retrieves the key of the start form for a process definition. The form key corresponds to the `FormData#formKey` property in the engine.",
        "operationId": "getProcessDefinitionByIdGetStartForm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Process definition has no start form defined. See the Introduction for the error response format."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves a process definition according to the `ProcessDefinition` interface in the engine",
        "description": "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
        "operationId": "getProcessDefinitionByIdGetProcessDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      },
      "delete": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Deletes a process definition from a deployment by id",
        "description": "Deletes a process definition from a deployment by id.",
        "operationId": "getProcessDefinitionByIdDeleteProcessDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "in": "query",
            "description": "Parameter cascade",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skipCustomListeners",
            "in": "query",
            "description": "Parameter skipCustomListeners",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with id 'aProcessDefinitionId' does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/start": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Start Process Instance",
        "description": "Start Process Instance",
        "operationId": "getProcessDefinitionByKeyStartProcessInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter startProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessInstanceDto"
            }
          }
        }
      }
    },
    "/process-definition/{id}/suspended": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Activates or suspends a given process definition by id or by latest version of process definition key",
        "description": "Activates or suspends a given process definition by id or by latest version of process definition key.",
        "operationId": "getProcessDefinitionByIdUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processDefinitionSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid, for example if the provided executionDate parameter doesn't have the expected format. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/history-time-to-live": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Updates history time to live for process definition",
        "description": "Updates history time to live for process definition. The field is used within History cleanup.",
        "operationId": "getProcessDefinitionByIdUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/rendered-form": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Rendered Form",
        "description": "Get Rendered Form",
        "operationId": "getProcessDefinitionByKeyGetRenderedForm",
        "produces": [
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/{id}/rendered-form": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves the rendered form for a process definition",
        "description": "Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.",
        "operationId": "getProcessDefinitionByIdGetRenderedForm",
        "produces": [
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Process definition has no form field metadata defined. See the Introduction for the error response format."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/submit-form": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Starts a process instance using a set of process variables and the business key",
        "description": "Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.",
        "operationId": "getProcessDefinitionByIdSubmitForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter startProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessInstanceDto"
            }
          },
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "The instance could not be created successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/startForm": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Start Form",
        "description": "Get Start Form",
        "operationId": "getProcessDefinitionByKeyGetStartForm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FormDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/submit-form": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Submit Form",
        "description": "Submit Form",
        "operationId": "getProcessDefinitionByKeySubmitForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter startProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessInstanceDto"
            }
          }
        }
      }
    },
    "/process-definition/statistics": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves runtime statistics of the process engine, grouped by process definitions",
        "description": "Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.\n Note: This does not include historic data.",
        "operationId": "getStatistics_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "failedJobs",
            "in": "query",
            "description": "Parameter failedJobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidents",
            "in": "query",
            "description": "Parameter incidents",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidentsForType",
            "in": "query",
            "description": "Parameter incidentsForType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "If both query parameters incidents and incidentsForType were set. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/xml": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Process Definition Bpmn 20 Xml",
        "description": "Get Process Definition Bpmn 20 Xml",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetProcessDefinitionBpmn20Xml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/restart": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Restart Process Instance",
        "description": "Restart Process Instance",
        "operationId": "getProcessDefinitionByKeyAndTenantIdRestartProcessInstance",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter restartProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/diagram": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Process Definition Diagram",
        "description": "Get Process Definition Diagram",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetProcessDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/restart-async": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Restart Process Instance Async",
        "description": "Restart Process Instance Async",
        "operationId": "getProcessDefinitionByKeyAndTenantIdRestartProcessInstanceAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter restartProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Process Definition",
        "description": "Get Process Definition",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetProcessDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionDto"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Delete Process Definition",
        "description": "Delete Process Definition",
        "operationId": "getProcessDefinitionByKeyAndTenantIdDeleteProcessDefinition",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "in": "query",
            "description": "Parameter cascade",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skipCustomListeners",
            "in": "query",
            "description": "Parameter skipCustomListeners",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/start": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Start Process Instance",
        "description": "Start Process Instance",
        "operationId": "getProcessDefinitionByKeyAndTenantIdStartProcessInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter startProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessInstanceDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Update History Time To Live",
        "description": "Update History Time To Live",
        "operationId": "getProcessDefinitionByKeyAndTenantIdUpdateHistoryTimeToLive",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter historyTimeToLiveDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HistoryTimeToLiveDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/rendered-form": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Rendered Form",
        "description": "Get Rendered Form",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetRenderedForm",
        "produces": [
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/suspended": {
      "put": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Update Suspension State",
        "description": "Update Suspension State",
        "operationId": "getProcessDefinitionByKeyAndTenantIdUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processDefinitionSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/{id}/diagram": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves the diagram of a process definition",
        "description": "Retrieves the diagram of a process definition.",
        "operationId": "getProcessDefinitionByIdGetProcessDefinitionDiagram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "204": {
            "description": "The process definition doesn't have an associated diagram."
          },
          "404": {
            "description": "Process definition with given id or key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/xml": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves the BPMN 2",
        "description": "Retrieves the BPMN 2.0 XML of a process definition.",
        "operationId": "getProcessDefinitionByIdGetProcessDefinitionBpmn20Xml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/{id}/restart-async": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Restarts process instances that were canceled or terminated asynchronously",
        "description": "Restarts process instances that were canceled or terminated asynchronously. To execute the restart synchronously, use the Restart Process Instance method.",
        "operationId": "getProcessDefinitionByIdRestartProcessInstanceAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter restartProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/restart-async": {
      "post": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Restart Process Instance Async",
        "description": "Restart Process Instance Async",
        "operationId": "getProcessDefinitionByKeyRestartProcessInstanceAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter restartProcessInstanceDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestartProcessInstanceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/diagram": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Process Definition Diagram",
        "description": "Get Process Definition Diagram",
        "operationId": "getProcessDefinitionByKeyGetProcessDefinitionDiagram",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-definition/key/{key}/xml": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Process Definition Bpmn 20 Xml",
        "description": "Get Process Definition Bpmn 20 Xml",
        "operationId": "getProcessDefinitionByKeyGetProcessDefinitionBpmn20Xml",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProcessDefinitionDiagramDto"
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/statistics": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Activity Statistics",
        "description": "Get Activity Statistics",
        "operationId": "getProcessDefinitionByKeyGetActivityStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "failedJobs",
            "in": "query",
            "description": "Parameter failedJobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidents",
            "in": "query",
            "description": "Parameter incidents",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidentsForType",
            "in": "query",
            "description": "Parameter incidentsForType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StatisticsResultDto"
              }
            }
          }
        }
      }
    },
    "/process-definition/{id}/form-variables": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach)",
        "description": "Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        "operationId": "getProcessDefinitionByIdGetFormVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableNames",
            "in": "query",
            "description": "Parameter variableNames",
            "required": false,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process definition with given key does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-definition/key/{key}/form-variables": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Form Variables",
        "description": "Get Form Variables",
        "operationId": "getProcessDefinitionByKeyGetFormVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableNames",
            "in": "query",
            "description": "Parameter variableNames",
            "required": false,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/VariableValueDto"
              }
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/form-variables": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Form Variables",
        "description": "Get Form Variables",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetFormVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableNames",
            "in": "query",
            "description": "Parameter variableNames",
            "required": false,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/VariableValueDto"
              }
            }
          }
        }
      }
    },
    "/process-definition/key/{key}/tenant-id/{tenantId}/statistics": {
      "get": {
        "tags": [
          "Process Definition"
        ],
        "summary": "Get Activity Statistics",
        "description": "Get Activity Statistics",
        "operationId": "getProcessDefinitionByKeyAndTenantIdGetActivityStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Parameter tenantId",
            "required": true,
            "type": "string"
          },
          {
            "name": "failedJobs",
            "in": "query",
            "description": "Parameter failedJobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidents",
            "in": "query",
            "description": "Parameter incidents",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "incidentsForType",
            "in": "query",
            "description": "Parameter incidentsForType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StatisticsResultDto"
              }
            }
          }
        }
      }
    },
    "/process-instance/job-retries": {
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Create a batch to set retries of jobs associated with given processes asynchronously",
        "description": "Create a batch to set retries of jobs associated with given processes asynchronously.",
        "operationId": "setRetriesByProcess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter setJobRetriesByProcessDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SetJobRetriesByProcessDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present. Or if the retry count is not specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/delete-historic-query-based": {
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Deletes a set of process instances asynchronously (batch) based on a historic process instance query",
        "description": "Deletes a set of process instances asynchronously (batch) based on a historic process instance query.",
        "operationId": "deleteAsyncHistoricQueryBased",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter deleteProcessInstancesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteProcessInstancesDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, e. g. neither processInstanceIds, nor historicProcessInstanceQuery is present. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/suspended": {
      "put": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Activates or suspends process instances with the given process definition id",
        "description": "Activates or suspends process instances with the given process definition id.",
        "operationId": "updateSuspensionState_3",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processInstanceSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessInstanceSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if some of the request parameters are invalid, for example if the provided processDefinitionId parameter is null. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/process-instance/{id}/variables": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Retrieves all variables of a given process instance by id",
        "description": "Retrieves all variables of a given process instance by id.",
        "operationId": "getProcessInstanceGetVariablesResourceGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Updates or deletes the variables of a process instance by id",
        "description": "Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.",
        "operationId": "getProcessInstanceGetVariablesResourceModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "Update or delete could not be executed, for example because the process instance does not exist."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/process-instance/{id}/modification": {
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Modify Process Instance",
        "description": "Modify Process Instance",
        "operationId": "getProcessInstanceModifyProcessInstance",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processInstanceModificationDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessInstanceModificationDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "At least one modification instruction misses required parameters."
          },
          "500": {
            "description": "The modification cannot be performed, for example because it starts a failing activity."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/process-instance/job-retries-historic-query-based": {
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Create a batch to set retries of jobs asynchronously based on a historic process instance query",
        "description": "Create a batch to set retries of jobs asynchronously based on a historic process instance query.",
        "operationId": "setRetriesByProcessHistoricQueryBased",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter setJobRetriesByProcessDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SetJobRetriesByProcessDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, e. g. if neither processInstances, nor processInstanceQuery is present. Or if the retry count is not specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/{id}/activity-instances": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Retrieves an Activity Instance (Tree) for a given process instance by id",
        "description": "Retrieves an Activity Instance (Tree) for a given process instance by id.",
        "operationId": "getProcessInstanceGetActivityInstanceTree",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Process instance with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/process-instance/{id}/suspended": {
      "put": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Activates or suspends a given process instance by id",
        "description": "Activates or suspends a given process instance by id.",
        "operationId": "getProcessInstanceUpdateSuspensionState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter processInstanceSuspensionStateDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProcessInstanceSuspensionStateDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/process-instance/{id}/variables/{varId}/data": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getProcessInstanceGetVariablesResourceGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getProcessInstanceGetVariablesResourceSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/process-instance/{id}/variables/{varId}": {
      "get": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getProcessInstanceGetVariablesResourceGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getProcessInstanceGetVariablesResourcePutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Process Instance"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getProcessInstanceGetVariablesResourceDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/variables/{varId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getTaskGetVariablesGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getTaskGetVariablesPutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getTaskGetVariablesDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/rendered-form": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the rendered form for a task",
        "description": "Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a Generated Task Form.",
        "operationId": "getTaskGetRenderedForm",
        "produces": [
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "The task with the given id does not exist or has no form field metadata defined for this task. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/identity-links/delete": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Removes an identity link from a task by id",
        "description": "Removes an identity link from a task by id.",
        "operationId": "getTaskDeleteIdentityLink",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter identityLinkDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IdentityLinkDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Task with given id does not exist. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/assignee": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Changes the assignee of a task to a specific user",
        "description": "Changes the assignee of a task to a specific user.",
        "operationId": "getTaskSetAssignee",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter userIdDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserIdDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Task with given id does not exist or setting the assignee was not successful. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a task by id",
        "description": "Retrieves a task by id.",
        "operationId": "getTaskGetTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. In case of an expected HAL response."
          },
          "404": {
            "description": "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update Task",
        "description": "Update Task",
        "operationId": "getTaskUpdateTask",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter taskDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete Task",
        "description": "Delete Task",
        "operationId": "getTaskDeleteTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/identity-links": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner)",
        "description": "Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner).",
        "operationId": "getTaskGetIdentityLinks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Parameter type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Adds an identity link to a task by id",
        "description": "Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.",
        "operationId": "getTaskAddIdentityLink",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter identityLinkDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IdentityLinkDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Task with given id does not exist. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/attachment": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets the attachments for a task",
        "description": "Gets the attachments for a task.",
        "operationId": "getTaskGetAttachmentResourceGetAttachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "No task exists for the given task id. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/comment": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Gets the comments for a task by id",
        "description": "Gets the comments for a task by id.",
        "operationId": "getTaskGetTaskCommentResourceGetComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "No task exists for the given task id. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/localVariables": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves all variables of a given task by id",
        "description": "Retrieves all variables of a given task by id.",
        "operationId": "getTaskGetLocalVariablesGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Task id is null or does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Updates or deletes the variables in the context of a task",
        "description": "Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.",
        "operationId": "getTaskGetLocalVariablesModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/variables": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves all variables visible from the task",
        "description": "Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.",
        "operationId": "getTaskGetVariablesGetVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "Task id is null or does not exist. See the Introduction for the error response format."
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Updates or deletes the variables visible from the task",
        "description": "Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.",
        "operationId": "getTaskGetVariablesModifyVariables",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter patchVariablesDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchVariablesDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/localVariables/{varId}/data": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getTaskGetLocalVariablesGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getTaskGetLocalVariablesSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/variables/{varId}/data": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Variable Binary",
        "description": "Get Variable Binary",
        "operationId": "getTaskGetVariablesGetVariableBinary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Set Binary Variable",
        "description": "Set Binary Variable",
        "operationId": "getTaskGetVariablesSetBinaryVariable",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/attachment/{attachmentId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a task attachment by task id and attachment id",
        "description": "Retrieves a task attachment by task id and attachment id.",
        "operationId": "getTaskGetAttachmentResourceGetAttachment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Parameter attachmentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "The attachment for given task and attachment id does not exist or the history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Removes an attachment from a task by id",
        "description": "Removes an attachment from a task by id.",
        "operationId": "getTaskGetAttachmentResourceDeleteAttachment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Parameter attachmentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "The history of the engine is disabled. See the Introduction for the error response format."
          },
          "404": {
            "description": "Task attachment for given task id and attachment id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/attachment/create": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Creates an attachment for a task",
        "description": "Creates an attachment for a task.",
        "operationId": "getTaskGetAttachmentResourceAddAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter multipartFormData",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AttachmentDto"
            }
          }
        }
      }
    },
    "/task/{id}/attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the binary content of a task attachment by task id and attachment id",
        "description": "Retrieves the binary content of a task attachment by task id and attachment id.",
        "operationId": "getTaskGetAttachmentResourceGetAttachmentData",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Parameter attachmentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "The attachment content for given task and attachment id does not exist or the history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/localVariables/{varId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Variable",
        "description": "Get Variable",
        "operationId": "getTaskGetLocalVariablesGetVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "name": "deserializeValue",
            "in": "query",
            "description": "Parameter deserializeValue",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Put Variable",
        "description": "Put Variable",
        "operationId": "getTaskGetLocalVariablesPutVariable",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter variableValueDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariableValueDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete Variable",
        "description": "Delete Variable",
        "operationId": "getTaskGetLocalVariablesDeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "varId",
            "in": "path",
            "description": "Parameter varId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/task/{id}/comment/{commentId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a task comment by task id and comment id",
        "description": "Retrieves a task comment by task id and comment id.",
        "operationId": "getTaskGetTaskCommentResourceGetComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Parameter commentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "The task or comment with given task and comment id do not exist, or the history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/comment/create": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Creates a comment for a task by id",
        "description": "Creates a comment for a task by id.",
        "operationId": "getTaskGetTaskCommentResourceCreateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter commentDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommentDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "The task does not exist or no comment message was submitted. See the Introduction for the error response format."
          },
          "403": {
            "description": "The history of the engine is disabled. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/report/candidate-group-count": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the number of tasks for each candidate group",
        "description": "Retrieves the number of tasks for each candidate group.",
        "operationId": "getTaskReportResourceGetTaskCountByCandidateGroupReport",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful. In case of an expected application/csv or text/csv response to retrieve the result as a csv file."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the Introduction for the error response format."
          },
          "403": {
            "description": "If the authenticated user is unauthorized to read the history. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/{id}/submit-form": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Completes a task and updates process variables using a form submit",
        "description": "Completes a task and updates process variables using a form submit. There are two difference between this method and the `complete` method:",
        "operationId": "getTaskSubmit",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter completeTaskDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompleteTaskDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/claim": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Claims a task for a specific user",
        "description": "Claims a task for a specific user.",
        "operationId": "getTaskClaim",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter userIdDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserIdDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Task with given id does not exist or claiming was not successful. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/delegate": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Delegates a task to another user",
        "description": "Delegates a task to another user.",
        "operationId": "getTaskDelegate",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter userIdDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserIdDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "If the task does not exist or delegation was not successful. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/complete": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Completes a task and updates process variables",
        "description": "Completes a task and updates process variables.",
        "operationId": "getTaskComplete",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter completeTaskDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompleteTaskDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/unclaim": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Resets a task's assignee",
        "description": "Resets a task's assignee. If successful, the task is not assigned to a user.",
        "operationId": "getTaskUnclaim",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Task with given id does not exist. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/resolve": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Resolves a task and updates execution variables",
        "description": "Resolves a task and updates execution variables.",
        "operationId": "getTaskResolve",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter completeTaskDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompleteTaskDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported. See the Introduction for the error response format."
          },
          "500": {
            "description": "If the task does not exist or the corresponding process instance could not be resumed successfully. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/form": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the form key for a task",
        "description": "Retrieves the form key for a task. The form key corresponds to the `FormData#formKey` property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.",
        "operationId": "getTaskGetForm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Task with given id does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/task/create": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Creates a new task",
        "description": "Creates a new task.",
        "operationId": "createTask",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter taskDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returned if a not valid delegationState is supplied. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          }
        }
      }
    },
    "/task/{id}/form-variables": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the form variables for a task (only if they are defined via the Generated Task Form approach)",
        "description": "Retrieves the form variables for a task (only if they are defined via the Generated Task Form approach). The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.",
        "operationId": "getTaskGetFormVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "variableNames",
            "in": "query",
            "description": "Parameter variableNames",
            "required": false,
            "type": "string"
          },
          {
            "name": "deserializeValues",
            "in": "query",
            "description": "Parameter deserializeValues",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Task id is null or does not exist. See the Introduction for the error response format."
          }
        }
      }
    },
    "/tenant": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Query for a list of tenants using a list of parameters",
        "description": "Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the Get Tenant Count method.",
        "operationId": "queryTenants",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Tenant"
        ],
        "summary": "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances",
        "description": "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "availableOperations_3",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/tenant/create": {
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Create a new tenant",
        "description": "Create a new tenant.",
        "operationId": "createTenant",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter tenantDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The tenant could not be created due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only."
          }
        }
      }
    },
    "/tenant/count": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Query for tenants using a list of parameters and retrieves the count",
        "description": "Query for tenants using a list of parameters and retrieves the count.",
        "operationId": "getTenantCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid. See the Introduction for the error response format."
          }
        }
      }
    },
    "/tenant/{id}/user-members/{userId}": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Creates a membership between a tenant and an user",
        "description": "Creates a membership between a tenant and an user.",
        "operationId": "getTenantGetTenantUserMembersResourceCreateMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Parameter userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "In case an internal error occurs. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only."
          }
        }
      },
      "delete": {
        "tags": [
          "Tenant"
        ],
        "summary": "Deletes a membership between a tenant and an user",
        "description": "Deletes a membership between a tenant and an user.",
        "operationId": "getTenantGetTenantUserMembersResourceDeleteMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Parameter userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "In case an error occurs. See the Introduction for the error response format."
          },
          "403": {
            "description": "Identity service is read-only."
          }
        }
      }
    },
    "/tenant/{id}/user-members": {
      "options": {
        "tags": [
          "Tenant"
        ],
        "summary": "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource",
        "description": "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "getTenantGetTenantUserMembersResourceAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/tenant/{id}/group-members/{groupId}": {
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Creates a membership between a tenant and a group",
        "description": "Creates a membership between a tenant and a group.",
        "operationId": "getTenantGetTenantGroupMembersResourceCreateMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Parameter groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "In case an internal error occurs. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only."
          }
        }
      },
      "delete": {
        "tags": [
          "Tenant"
        ],
        "summary": "Deletes a membership between a tenant and a group",
        "description": "Deletes a membership between a tenant and a group.",
        "operationId": "getTenantGetTenantGroupMembersResourceDeleteMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Parameter groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "500": {
            "description": "In case an error occurs. See the Introduction for the error response format."
          },
          "403": {
            "description": "Identity service is read-only."
          }
        }
      }
    },
    "/tenant/{id}/group-members": {
      "options": {
        "tags": [
          "Tenant"
        ],
        "summary": "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource",
        "description": "The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "getTenantGetTenantGroupMembersResourceAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/tenant/{id}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Retrieves a tenant",
        "description": "Retrieves a tenant.",
        "operationId": "getTenantGetTenant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Tenant with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Updates a given tenant",
        "description": "Updates a given tenant.",
        "operationId": "getTenantUpdateTenant",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter tenantDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The tenant could not be updated due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only."
          },
          "404": {
            "description": "If the tenant with the requested Id cannot be found."
          }
        }
      },
      "delete": {
        "tags": [
          "Tenant"
        ],
        "summary": "Deletes a tenant by id",
        "description": "Deletes a tenant by id.",
        "operationId": "getTenantDeleteTenant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only."
          },
          "404": {
            "description": "Tenant cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "Tenant"
        ],
        "summary": "Available Operations",
        "description": "Available Operations",
        "operationId": "getTenantAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/user-operation/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query User Operation Count",
        "description": "Query User Operation Count",
        "operationId": "queryUserOperationCount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountResultDto"
            }
          }
        }
      }
    },
    "/user-operation": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query User Operation Entries",
        "description": "Query User Operation Entries",
        "operationId": "queryUserOperationEntries_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserOperationLogEntryDto"
              }
            }
          }
        }
      }
    },
    "/user/{id}/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a user's profile",
        "description": "Retrieves a user's profile.",
        "operationId": "getUserGetUserProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "404": {
            "description": "Execution with given id does not exist. See the Introduction for the error response format."
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates the profile information of an already existing user",
        "description": "Updates the profile information of an already existing user.",
        "operationId": "getUserUpdateProfile",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter userProfileDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The user could not be updated due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404": {
            "description": "If the user with the requested Id cannot be found."
          }
        }
      }
    },
    "/user/{id}/credentials": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates a user's credentials (password)",
        "description": "Updates a user's credentials (password).",
        "operationId": "getUserUpdateCredentials",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameter userCredentialsDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserCredentialsDto"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "If the authenticated user password does not match."
          },
          "500": {
            "description": "The user could not be created due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404": {
            "description": "If the corresponding user cannot be found"
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user by id",
        "description": "Deletes a user by id.",
        "operationId": "getUserDeleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          },
          "404": {
            "description": "User cannot be found. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "User"
        ],
        "summary": "Available Operations",
        "description": "Available Operations",
        "operationId": "getUserAvailableOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOptionsDto"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query for a list of users using a list of parameters",
        "description": "Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method.",
        "operationId": "queryUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstResult",
            "in": "query",
            "description": "Parameter firstResult",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Parameter maxResults",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      },
      "options": {
        "tags": [
          "User"
        ],
        "summary": "The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances",
        "description": "The `/user` resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/user` resource. If the user can perform an operation or not may depend on various things, including the user's authorizations to interact with this resource and the internal context of the process engine.",
        "operationId": "availableOperations_4",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          }
        }
      }
    },
    "/user/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query for users using a list of parameters and retrieves the count",
        "description": "Query for users using a list of parameters and retrieves the count.",
        "operationId": "getUserCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful."
          },
          "400": {
            "description": "Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified. See the Introduction for the error response format."
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "Create a new user.",
        "operationId": "createUser",
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameter userDto",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The user could not be created due to an internal server error. See the Introduction for the error response format."
          },
          "204": {
            "description": "Request successful."
          },
          "403": {
            "description": "Identity service is read-only (Cannot modify users / groups / memberships)."
          }
        }
      }
    }
  },
  "definitions": {
    "CountResultDto": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The number of matching case executions."
        }
      }
    },
    "AuthorizationDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the authorization."
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the authorization (0=global, 1=grant, 2=revoke)."
        },
        "permissions": {
          "type": "array",
          "description": "An array of Strings holding the permissions provided by this authorization.",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string",
          "description": "The id of the user this authorization has been created for. The value \"*\" represents a global authorization ranging over all users."
        },
        "groupId": {
          "type": "string",
          "description": "The id of the group this authorization has been created for."
        },
        "resourceType": {
          "type": "integer",
          "format": "int32",
          "description": "An integer representing the resource type. See the User Guide for a list of integer representations of resource types."
        },
        "resourceId": {
          "type": "string",
          "description": "The resource Id. The value \"*\" represents an authorization ranging over all instances of a resource."
        }
      }
    },
    "AuthorizationCreateDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the authorization. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types."
        },
        "permissions": {
          "type": "array",
          "description": "An array of Strings holding the permissions provided by this authorization.",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string",
          "description": "The id of the user this authorization has been created for. The value \"*\" represents a global authorization ranging over all users."
        },
        "groupId": {
          "type": "string",
          "description": "The id of the group this authorization has been created for."
        },
        "resourceType": {
          "type": "integer",
          "format": "int32",
          "description": "An integer representing the resource type. See the User Guide for a list of integer representations of resource types."
        },
        "resourceId": {
          "type": "string",
          "description": "The resource Id. The value \"*\" represents an authorization ranging over all instances of a resource."
        }
      }
    },
    "AtomLink": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        }
      }
    },
    "ResourceOptionsDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        }
      }
    },
    "AuthorizationCheckResultDto": {
      "type": "object",
      "properties": {
        "permissionName": {
          "type": "string",
          "description": "Name of the permission which was checked."
        },
        "resourceName": {
          "type": "string",
          "description": "The name of the resource for which the permission check was performed."
        },
        "resourceId": {
          "type": "string",
          "description": "The id of the resource for which the permission check was performed."
        },
        "authorized": {
          "type": "boolean"
        }
      }
    },
    "SuspensionStateDto": {
      "type": "object",
      "properties": {
        "suspended": {
          "type": "boolean"
        }
      }
    },
    "BatchStatisticsDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the batch."
        },
        "type": {
          "type": "string",
          "description": "The type of the batch. See the User Guide for more information about batch types."
        },
        "totalJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The total jobs of a batch is the number of batch execution jobs required to complete the batch."
        },
        "jobsCreated": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batch execution jobs already created by the seed job."
        },
        "batchJobsPerSeed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property)."
        },
        "invocationsPerBatchJob": {
          "type": "integer",
          "format": "int32",
          "description": "Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job."
        },
        "seedJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the seed jobs of this batch."
        },
        "monitorJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the monitor jobs of this batch."
        },
        "batchJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the batch execution jobs of this batch."
        },
        "suspended": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the batch."
        },
        "remainingJobs": {
          "type": "integer",
          "format": "int32"
        },
        "completedJobs": {
          "type": "integer",
          "format": "int32"
        },
        "failedJobs": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BatchDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the batch."
        },
        "type": {
          "type": "string",
          "description": "The type of the batch. See the User Guide for more information about batch types."
        },
        "totalJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The total jobs of a batch is the number of batch execution jobs required to complete the batch."
        },
        "jobsCreated": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batch execution jobs already created by the seed job."
        },
        "batchJobsPerSeed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property)."
        },
        "invocationsPerBatchJob": {
          "type": "integer",
          "format": "int32",
          "description": "Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job."
        },
        "seedJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the seed jobs of this batch."
        },
        "monitorJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the monitor jobs of this batch."
        },
        "batchJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the batch execution jobs of this batch."
        },
        "suspended": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the batch."
        }
      }
    },
    "CaseDefinitionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the case definition."
        },
        "key": {
          "type": "string",
          "description": "The key of the case definition, i.e., the id of the CMMN 2.0 XML case definition."
        },
        "category": {
          "type": "string",
          "description": "The category of the case definition."
        },
        "name": {
          "type": "string",
          "description": "The name of the case definition."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the case definition that the engine assigned to it."
        },
        "resource": {
          "type": "string",
          "description": "The file name of the case definition."
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment id of the case definition."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the case definition."
        },
        "historyTimeToLive": {
          "type": "integer",
          "format": "int32",
          "description": "History time to live value of the case definition. Is used within History cleanup."
        }
      }
    },
    "HistoryTimeToLiveDto": {
      "type": "object",
      "properties": {
        "historyTimeToLive": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CaseInstanceDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the case instance."
        },
        "caseDefinitionId": {
          "type": "string",
          "description": "The id of the case definition this instance belongs to."
        },
        "businessKey": {
          "type": "string",
          "description": "The business key of the case instance."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the case instance."
        },
        "active": {
          "type": "boolean"
        },
        "completed": {
          "type": "boolean"
        },
        "terminated": {
          "type": "boolean"
        }
      }
    },
    "CreateCaseInstanceDto": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "businessKey": {
          "type": "string"
        }
      }
    },
    "VariableValueDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "valueInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "CaseDefinitionDiagramDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the case definition."
        },
        "cmmnXml": {
          "type": "string",
          "description": "An escaped XML string containing the XML that this case definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "MultipartFormData": {
      "type": "object",
      "properties": {
        "partNames": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CaseExecutionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the case execution."
        },
        "caseInstanceId": {
          "type": "string",
          "description": "The id of the case instance this case execution belongs to."
        },
        "caseDefinitionId": {
          "type": "string",
          "description": "The id of the case definition this case execution belongs to."
        },
        "activityId": {
          "type": "string",
          "description": "The id of the activity this case execution belongs to."
        },
        "activityName": {
          "type": "string",
          "description": "The name of the activity this case execution belongs to."
        },
        "activityType": {
          "type": "string",
          "description": "The type of the activity this case execution belongs to."
        },
        "activityDescription": {
          "type": "string",
          "description": "The description of the activity this case execution belongs to."
        },
        "parentId": {
          "type": "string",
          "description": "The id of the parent of this case execution belongs to."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the case execution."
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "CaseExecutionQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "SortingDto": {
      "type": "object",
      "properties": {
        "sortBy": {
          "type": "string"
        },
        "sortOrder": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "CaseExecutionTriggerDto": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TriggerVariableValueDto"
          }
        },
        "deletions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableNameDto"
          }
        }
      }
    },
    "TriggerVariableValueDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "valueInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "local": {
          "type": "boolean"
        }
      }
    },
    "VariableNameDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "local": {
          "type": "boolean"
        }
      }
    },
    "PatchVariablesDto": {
      "type": "object",
      "properties": {
        "modifications": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "deletions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CaseInstanceQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "DecisionDefinitionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the decision definition."
        },
        "key": {
          "type": "string",
          "description": "The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition."
        },
        "category": {
          "type": "string",
          "description": "The category of the decision definition."
        },
        "name": {
          "type": "string",
          "description": "The name of the decision definition."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the decision definition that the engine assigned to it."
        },
        "resource": {
          "type": "string",
          "description": "The file name of the decision definition."
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment id of the decision definition."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the decision definition."
        },
        "decisionRequirementsDefinitionId": {
          "type": "string",
          "description": "The id of the decision requirements definition this decision definition belongs to."
        },
        "decisionRequirementsDefinitionKey": {
          "type": "string",
          "description": "The key of the decision requirements definition this decision definition belongs to."
        },
        "historyTimeToLive": {
          "type": "integer",
          "format": "int32",
          "description": "History time to live value of the decision definition. Is used within History cleanup."
        }
      }
    },
    "EvaluateDecisionDto": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "DecisionDefinitionDiagramDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the decision definition."
        },
        "dmnXml": {
          "type": "string",
          "description": "An escaped XML string containing the XML that this decision definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "DecisionRequirementsDefinitionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the decision requirements definition."
        },
        "key": {
          "type": "string",
          "description": "The key of the decision requirements definition, i.e., the id of the DMN 1.1 XML decision definition."
        },
        "category": {
          "type": "string",
          "description": "The category of the decision requirements definition."
        },
        "name": {
          "type": "string",
          "description": "The name of the decision requirements definition."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the decision requirements definition that the engine assigned to it."
        },
        "resource": {
          "type": "string",
          "description": "The file name of the decision requirements definition."
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment id of the decision requirements definition."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the decision requirements definition."
        }
      }
    },
    "DecisionRequirementsDefinitionXmlDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the decision requirements definition."
        },
        "dmnXml": {
          "type": "string",
          "description": "An escaped XML string containing the XML that this decision requirements definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "DeploymentDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the deployment."
        },
        "name": {
          "type": "string",
          "description": "The name of the deployment."
        },
        "source": {
          "type": "string",
          "description": "The source of the deployment."
        },
        "deploymentTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time of the deployment."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the deployment."
        }
      }
    },
    "RedeploymentDto": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentWithDefinitionsDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the deployment."
        },
        "name": {
          "type": "string",
          "description": "The name of the deployment."
        },
        "source": {
          "type": "string",
          "description": "The source of the deployment."
        },
        "deploymentTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time of the deployment."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the deployment."
        },
        "deployedProcessDefinitions": {
          "type": "object",
          "description": "A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition, which is defined in the Process Definition resource.",
          "additionalProperties": {
            "$ref": "#/definitions/ProcessDefinitionDto"
          }
        },
        "deployedCaseDefinitions": {
          "type": "object",
          "description": "A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition, which is defined in the Case Definition resource.",
          "additionalProperties": {
            "$ref": "#/definitions/CaseDefinitionDto"
          }
        },
        "deployedDecisionDefinitions": {
          "type": "object",
          "description": "A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition, which is defined in the Decision Definition resource.",
          "additionalProperties": {
            "$ref": "#/definitions/DecisionDefinitionDto"
          }
        },
        "deployedDecisionRequirementsDefinitions": {
          "type": "object",
          "description": "A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition, which is defined in the Decision Requirements Definition resource.",
          "additionalProperties": {
            "$ref": "#/definitions/DecisionRequirementsDefinitionDto"
          }
        }
      }
    },
    "ProcessDefinitionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the process definition."
        },
        "key": {
          "type": "string",
          "description": "The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition."
        },
        "category": {
          "type": "string",
          "description": "The category of the process definition."
        },
        "description": {
          "type": "string",
          "description": "The description of the process definition."
        },
        "name": {
          "type": "string",
          "description": "The name of the process definition."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the process definition that the engine assigned to it."
        },
        "resource": {
          "type": "string",
          "description": "The file name of the process definition."
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment id of the process definition."
        },
        "diagram": {
          "type": "string",
          "description": "The file name of the process definition diagram, if it exists."
        },
        "suspended": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the process definition."
        },
        "versionTag": {
          "type": "string",
          "description": "The version tag of the process definition."
        },
        "historyTimeToLive": {
          "type": "integer",
          "format": "int32",
          "description": "History time to live value of the process definition. Is used within History cleanup."
        }
      }
    },
    "DeploymentResourceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the deployment resource."
        },
        "name": {
          "type": "string",
          "description": "The name of the deployment resource."
        },
        "deploymentId": {
          "type": "string",
          "description": "The id of the deployment."
        }
      }
    },
    "ExecutionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the execution."
        },
        "processInstanceId": {
          "type": "string",
          "description": "The id of the process instance that this execution instance belongs to."
        },
        "ended": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the execution."
        }
      }
    },
    "ExecutionQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "EventSubscriptionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "ExecutionTriggerDto": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "ExternalTaskDto": {
      "type": "object",
      "properties": {
        "activityId": {
          "type": "string",
          "description": "The id of the activity that this external task belongs to."
        },
        "activityInstanceId": {
          "type": "string",
          "description": "The id of the activity instance that the external task belongs to."
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message that was supplied when the last failure of this task was reported."
        },
        "errorDetails": {
          "type": "string"
        },
        "executionId": {
          "type": "string",
          "description": "The id of the execution that the external task belongs to."
        },
        "id": {
          "type": "string",
          "description": "The id of the external task."
        },
        "lockExpirationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date that the task's most recent lock expires or has expired."
        },
        "processDefinitionId": {
          "type": "string",
          "description": "The id of the process definition the external task is defined in."
        },
        "processDefinitionKey": {
          "type": "string",
          "description": "The key of the process definition the external task is defined in."
        },
        "processInstanceId": {
          "type": "string",
          "description": "The id of the process instance the external task belongs to."
        },
        "retries": {
          "type": "integer",
          "format": "int32",
          "description": "The number of retries the task currently has left."
        },
        "suspended": {
          "type": "boolean"
        },
        "workerId": {
          "type": "string",
          "description": "The id of the worker that posesses or posessed the most recent lock."
        },
        "topicName": {
          "type": "string",
          "description": "The topic name of the external task."
        },
        "tenantId": {
          "type": "string",
          "description": "The id of the tenant the external task belongs to."
        },
        "priority": {
          "type": "integer",
          "format": "int64",
          "description": "The priority of the external task."
        }
      }
    },
    "ExternalTaskQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "CompleteExternalTaskDto": {
      "type": "object",
      "properties": {
        "workerId": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "ExternalTaskBpmnError": {
      "type": "object",
      "properties": {
        "workerId": {
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        }
      }
    },
    "RetriesDto": {
      "type": "object",
      "properties": {
        "retries": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PriorityDto": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ExternalTaskFailureDto": {
      "type": "object",
      "properties": {
        "workerId": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorDetails": {
          "type": "string"
        },
        "retryTimeout": {
          "type": "integer",
          "format": "int64"
        },
        "retries": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LockedExternalTaskDto": {
      "type": "object",
      "properties": {
        "activityId": {
          "type": "string"
        },
        "activityInstanceId": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorDetails": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lockExpirationTime": {
          "type": "string",
          "format": "date-time"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "retries": {
          "type": "integer",
          "format": "int32"
        },
        "suspended": {
          "type": "boolean"
        },
        "workerId": {
          "type": "string"
        },
        "topicName": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FetchExternalTaskTopicDto": {
      "type": "object",
      "properties": {
        "topicName": {
          "type": "string"
        },
        "lockDuration": {
          "type": "integer",
          "format": "int64"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deserializeValues": {
          "type": "boolean"
        }
      }
    },
    "FetchExternalTasksDto": {
      "type": "object",
      "properties": {
        "maxTasks": {
          "type": "integer",
          "format": "int32"
        },
        "workerId": {
          "type": "string"
        },
        "usePriority": {
          "type": "boolean"
        },
        "topics": {
          "type": "array",
          "description": "A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be arbitrarily distributed among these topics. Each topic object has the following properties: Name Description topicName Mandatory. The topic's name. lockDuration Mandatory. The duration to lock the external tasks for in milliseconds. variables A JSON array of String values that represent variable names. For each result task belonging to this topic, the given variables are returned as well if they are accessible from the external task's execution. If not provided - all variables will be fetched. deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default false).",
          "items": {
            "$ref": "#/definitions/FetchExternalTaskTopicDto"
          }
        }
      }
    },
    "SetRetriesForExternalTasksDto": {
      "type": "object",
      "properties": {
        "externalTaskIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalTaskQuery": {
          "$ref": "#/definitions/ExternalTaskQueryDto"
        },
        "retries": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AbstractQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "AbstractQueryDtoObject": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "FilterDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the filter."
        },
        "resourceType": {
          "type": "string",
          "description": "The resource type of the filter, e.g., Task."
        },
        "name": {
          "type": "string",
          "description": "The name of the filter."
        },
        "owner": {
          "type": "string",
          "description": "The user id of the owner of the filter."
        },
        "query": {
          "description": "The save query of the filter as JSON object.",
          "$ref": "#/definitions/AbstractQueryDtoObject"
        },
        "properties": {
          "type": "object",
          "description": "The properties of the filter as JSON object.",
          "additionalProperties": {
            "type": "object"
          }
        },
        "itemCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items matched by the filter itself. Note: Only exists if the query parameter itemCount was set to true"
        }
      }
    },
    "GroupDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "HistoricActivityInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "parentActivityInstanceId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityName": {
          "type": "string"
        },
        "activityType": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "calledProcessInstanceId": {
          "type": "string"
        },
        "calledCaseInstanceId": {
          "type": "string"
        },
        "assignee": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "durationInMillis": {
          "type": "integer",
          "format": "int64"
        },
        "canceled": {
          "type": "boolean"
        },
        "completeScope": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "HistoricActivityInstanceQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoricActivityStatisticsDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "instances": {
          "type": "integer",
          "format": "int64"
        },
        "canceled": {
          "type": "integer",
          "format": "int64"
        },
        "finished": {
          "type": "integer",
          "format": "int64"
        },
        "completeScope": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "HistoricBatchDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the batch."
        },
        "type": {
          "type": "string",
          "description": "The type of the batch. See the User Guide for more information about batch types."
        },
        "totalJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The total jobs of a batch is the number of batch execution jobs required to complete the batch."
        },
        "batchJobsPerSeed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property)."
        },
        "invocationsPerBatchJob": {
          "type": "integer",
          "format": "int32",
          "description": "Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job."
        },
        "seedJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the seed jobs of this batch."
        },
        "monitorJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the monitor jobs of this batch."
        },
        "batchJobDefinitionId": {
          "type": "string",
          "description": "The job definition id for the batch execution jobs of this batch."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the batch."
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "HistoricCaseActivityInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "parentCaseActivityInstanceId": {
          "type": "string"
        },
        "caseActivityId": {
          "type": "string"
        },
        "caseActivityName": {
          "type": "string"
        },
        "caseActivityType": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "caseExecutionId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "calledProcessInstanceId": {
          "type": "string"
        },
        "calledCaseInstanceId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "durationInMillis": {
          "type": "integer",
          "format": "int64"
        },
        "required": {
          "type": "boolean"
        },
        "available": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "completed": {
          "type": "boolean"
        },
        "terminated": {
          "type": "boolean"
        }
      }
    },
    "HistoricCaseActivityStatisticsDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "available": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "integer",
          "format": "int64"
        },
        "disabled": {
          "type": "integer",
          "format": "int64"
        },
        "active": {
          "type": "integer",
          "format": "int64"
        },
        "completed": {
          "type": "integer",
          "format": "int64"
        },
        "terminated": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "HistoricCaseInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the case instance."
        },
        "businessKey": {
          "type": "string",
          "description": "The business key of the case instance."
        },
        "caseDefinitionId": {
          "type": "string",
          "description": "The id of the case definition this instance belongs to."
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseDefinitionName": {
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "closeTime": {
          "type": "string",
          "format": "date-time"
        },
        "durationInMillis": {
          "type": "integer",
          "format": "int64"
        },
        "createUserId": {
          "type": "string"
        },
        "superCaseInstanceId": {
          "type": "string"
        },
        "superProcessInstanceId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the case instance."
        },
        "active": {
          "type": "boolean",
          "description": "A flag indicating whether the case instance is active or not."
        },
        "completed": {
          "type": "boolean",
          "description": "A flag indicating whether the case instance is completed or not."
        },
        "terminated": {
          "type": "boolean"
        },
        "closed": {
          "type": "boolean"
        }
      }
    },
    "HistoricCaseInstanceQueryDto": {
      "type": "object",
      "properties": {
        "caseInstanceId": {
          "type": "string"
        },
        "caseInstanceIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseDefinitionName": {
          "type": "string"
        },
        "caseDefinitionNameLike": {
          "type": "string"
        },
        "caseDefinitionKeyNotIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "caseInstanceBusinessKey": {
          "type": "string"
        },
        "caseInstanceBusinessKeyLike": {
          "type": "string"
        },
        "superCaseInstanceId": {
          "type": "string"
        },
        "subCaseInstanceId": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "caseActivityIdIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdBefore": {
          "type": "string",
          "format": "date-time"
        },
        "createdAfter": {
          "type": "string",
          "format": "date-time"
        },
        "closedBefore": {
          "type": "string",
          "format": "date-time"
        },
        "closedAfter": {
          "type": "string",
          "format": "date-time"
        },
        "active": {
          "type": "boolean"
        },
        "completed": {
          "type": "boolean"
        },
        "terminated": {
          "type": "boolean"
        },
        "closed": {
          "type": "boolean"
        },
        "notClosed": {
          "type": "boolean"
        },
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoricDecisionInputInstanceDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "valueInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "string"
        },
        "decisionInstanceId": {
          "type": "string"
        },
        "clauseId": {
          "type": "string"
        },
        "clauseName": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "HistoricDecisionInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "decisionDefinitionId": {
          "type": "string"
        },
        "decisionDefinitionKey": {
          "type": "string"
        },
        "decisionDefinitionName": {
          "type": "string"
        },
        "evaluationTime": {
          "type": "string",
          "format": "date-time"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityInstanceId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricDecisionInputInstanceDto"
          }
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricDecisionOutputInstanceDto"
          }
        },
        "collectResultValue": {
          "type": "number",
          "format": "double"
        },
        "rootDecisionInstanceId": {
          "type": "string"
        },
        "decisionRequirementsDefinitionId": {
          "type": "string"
        },
        "decisionRequirementsDefinitionKey": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "HistoricDecisionOutputInstanceDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "valueInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "string"
        },
        "decisionInstanceId": {
          "type": "string"
        },
        "clauseId": {
          "type": "string"
        },
        "clauseName": {
          "type": "string"
        },
        "ruleId": {
          "type": "string"
        },
        "ruleOrder": {
          "type": "integer",
          "format": "int32"
        },
        "variableName": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "HistoricDecisionInstanceStatisticsDto": {
      "type": "object",
      "properties": {
        "decisionDefinitionKey": {
          "type": "string"
        },
        "evaluations": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "HistoricDetailDto": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "activityInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "caseExecutionId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "userOperationId": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "HistoricFormFieldDto": {
      "allOf": [
        {
          "$ref": "#/definitions/HistoricDetailDto"
        },
        {
          "type": "object",
          "properties": {
            "fieldId": {
              "type": "string"
            },
            "fieldValue": {
              "type": "object"
            }
          }
        }
      ]
    },
    "HistoricVariableUpdateDto": {
      "allOf": [
        {
          "$ref": "#/definitions/HistoricDetailDto"
        },
        {
          "type": "object",
          "properties": {
            "variableName": {
              "type": "string"
            },
            "variableInstanceId": {
              "type": "string"
            },
            "variableType": {
              "type": "string"
            },
            "value": {
              "type": "object"
            },
            "valueInfo": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "revision": {
              "type": "integer",
              "format": "int32"
            },
            "errorMessage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HistoricExternalTaskLogDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "externalTaskId": {
          "type": "string"
        },
        "topicName": {
          "type": "string"
        },
        "workerId": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "retries": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "creationLog": {
          "type": "boolean"
        },
        "failureLog": {
          "type": "boolean"
        },
        "successLog": {
          "type": "boolean"
        },
        "deletionLog": {
          "type": "boolean"
        }
      }
    },
    "HistoricExternalTaskLogQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoricIdentityLinkLogDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "operationType": {
          "type": "string"
        },
        "assignerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "HistoricIncidentDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "incidentType": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "causeIncidentId": {
          "type": "string"
        },
        "rootCauseIncidentId": {
          "type": "string"
        },
        "configuration": {
          "type": "string"
        },
        "incidentMessage": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "jobDefinitionId": {
          "type": "string"
        },
        "open": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "resolved": {
          "type": "boolean"
        }
      }
    },
    "HistoricJobLogDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "jobId": {
          "type": "string"
        },
        "jobDueDate": {
          "type": "string",
          "format": "date-time"
        },
        "jobRetries": {
          "type": "integer",
          "format": "int32"
        },
        "jobPriority": {
          "type": "integer",
          "format": "int64"
        },
        "jobExceptionMessage": {
          "type": "string"
        },
        "jobDefinitionId": {
          "type": "string"
        },
        "jobDefinitionType": {
          "type": "string"
        },
        "jobDefinitionConfiguration": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "deploymentId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "creationLog": {
          "type": "boolean"
        },
        "failureLog": {
          "type": "boolean"
        },
        "successLog": {
          "type": "boolean"
        },
        "deletionLog": {
          "type": "boolean"
        }
      }
    },
    "HistoricJobLogQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "DeleteHistoricProcessInstancesDto": {
      "type": "object",
      "properties": {
        "historicProcessInstanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "historicProcessInstanceQuery": {
          "$ref": "#/definitions/HistoricProcessInstanceQueryDto"
        },
        "deleteReason": {
          "type": "string"
        }
      }
    },
    "HistoricProcessInstanceQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoricProcessInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the process instance."
        },
        "businessKey": {
          "type": "string",
          "description": "The business key of the process instance."
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionName": {
          "type": "string"
        },
        "processDefinitionVersion": {
          "type": "integer",
          "format": "int32"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "durationInMillis": {
          "type": "integer",
          "format": "int64"
        },
        "startUserId": {
          "type": "string"
        },
        "startActivityId": {
          "type": "string"
        },
        "deleteReason": {
          "type": "string"
        },
        "superProcessInstanceId": {
          "type": "string"
        },
        "superCaseInstanceId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string",
          "description": "The id of the case instance associated with the process instance."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the process instance."
        },
        "state": {
          "type": "string"
        }
      }
    },
    "HistoricTaskInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "caseExecutionId": {
          "type": "string"
        },
        "activityInstanceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deleteReason": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "assignee": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "taskDefinitionKey": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "due": {
          "type": "string",
          "format": "date-time"
        },
        "parentTaskId": {
          "type": "string"
        },
        "followUp": {
          "type": "string",
          "format": "date-time"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "HistoricTaskInstanceQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoricVariableInstanceDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "valueInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the variable instance."
        },
        "name": {
          "type": "string",
          "description": "The name of the variable instance."
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string",
          "description": "The id of the process instance that this variable instance belongs to."
        },
        "executionId": {
          "type": "string",
          "description": "The id of the execution that this variable instance belongs to."
        },
        "activityInstanceId": {
          "type": "string",
          "description": "The id of the activity instance that this variable instance belongs to."
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string",
          "description": "The id of the case instance that this variable instance belongs to."
        },
        "caseExecutionId": {
          "type": "string",
          "description": "The id of the case execution that this variable instance belongs to."
        },
        "taskId": {
          "type": "string",
          "description": "The id of the task that this variable instance belongs to."
        },
        "errorMessage": {
          "type": "string",
          "description": "An error message in case a Java Serialized Object could not be de-serialized."
        },
        "tenantId": {
          "type": "string",
          "description": "The id of the tenant that this variable instance belongs to."
        }
      }
    },
    "HistoricVariableInstanceQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "HistoricBatchRestService": {
      "type": "object"
    },
    "JobDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the job."
        },
        "jobDefinitionId": {
          "type": "string",
          "description": "The id of the associated job definition."
        },
        "processInstanceId": {
          "type": "string",
          "description": "The id of the process instance which execution created the job."
        },
        "processDefinitionId": {
          "type": "string",
          "description": "The id of the process definition which this job belongs to."
        },
        "processDefinitionKey": {
          "type": "string",
          "description": "The key of the process definition which this job belongs to."
        },
        "executionId": {
          "type": "string",
          "description": "The specific execution id on which the job was created."
        },
        "exceptionMessage": {
          "type": "string",
          "description": "The message of the exception that occurred, the last time the job was executed. Is null when no exception occurred."
        },
        "retries": {
          "type": "integer",
          "format": "int32",
          "description": "The number of retries this job has left."
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which this job is supposed to be processed."
        },
        "suspended": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int64",
          "description": "The job's priority for execution."
        },
        "tenantId": {
          "type": "string",
          "description": "The id of the tenant which this job belongs to."
        }
      }
    },
    "HistoricDetailRestService": {
      "type": "object"
    },
    "HistoricJobLogRestService": {
      "type": "object"
    },
    "UserOperationLogRestService": {
      "type": "object"
    },
    "UserOperationLogEntryDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "deploymentId": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "caseExecutionId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "jobId": {
          "type": "string"
        },
        "jobDefinitionId": {
          "type": "string"
        },
        "batchId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "operationId": {
          "type": "string"
        },
        "operationType": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "orgValue": {
          "type": "string"
        },
        "newValue": {
          "type": "string"
        }
      }
    },
    "HistoricActivityInstanceRestService": {
      "type": "object"
    },
    "HistoricCaseActivityInstanceRestService": {
      "type": "object"
    },
    "HistoricActivityStatisticsRestService": {
      "type": "object"
    },
    "HistoricCaseActivityStatisticsRestService": {
      "type": "object"
    },
    "HistoricCaseInstanceRestService": {
      "type": "object"
    },
    "HistoricDecisionStatisticsRestService": {
      "type": "object"
    },
    "HistoricIdentityLinkLogRestService": {
      "type": "object"
    },
    "HistoricExternalTaskLogRestService": {
      "type": "object"
    },
    "HistoricTaskInstanceRestService": {
      "type": "object"
    },
    "HistoricDecisionInstanceRestService": {
      "type": "object"
    },
    "HistoricIncidentRestService": {
      "type": "object"
    },
    "HistoricProcessInstanceRestService": {
      "type": "object"
    },
    "HistoricVariableInstanceRestService": {
      "type": "object"
    },
    "AuthenticationResult": {
      "type": "object",
      "properties": {
        "authenticatedUser": {
          "type": "string"
        },
        "authenticated": {
          "type": "boolean"
        }
      }
    },
    "BasicUserCredentialsDto": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "The user's new password."
        },
        "authenticatedUserPassword": {
          "type": "string",
          "description": "The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter)."
        },
        "username": {
          "type": "string",
          "description": "The username of a user."
        }
      }
    },
    "GroupInfoDto": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "description": "A JSON array of group object. Every group object has a id property and a name property.",
          "items": {
            "$ref": "#/definitions/GroupDto"
          }
        },
        "groupUsers": {
          "type": "array",
          "description": "A JSON array that contains all users that are member in one of the groups. Every user object has four properties: id, firstName, lastName and displayName. The displayName is the id, if firstName and lastName are null and firstName lastName otherwise.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/UserDto"
          }
        }
      }
    },
    "UserDto": {
      "type": "object",
      "properties": {
        "profile": {
          "description": "A JSON object containing variable key-value pairs. The object contains the following properties: id (String), firstName (String), lastName (String) and email (String).",
          "$ref": "#/definitions/UserProfileDto"
        },
        "credentials": {
          "description": "A JSON object containing variable key-value pairs. The object contains the following property: password (String).",
          "$ref": "#/definitions/UserCredentialsDto"
        }
      }
    },
    "IncidentDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "incidentTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "incidentType": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "causeIncidentId": {
          "type": "string"
        },
        "rootCauseIncidentId": {
          "type": "string"
        },
        "configuration": {
          "type": "string"
        },
        "incidentMessage": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "jobDefinitionId": {
          "type": "string"
        }
      }
    },
    "JobDefinitionSuspensionStateDto": {
      "type": "object",
      "properties": {
        "suspended": {
          "type": "boolean"
        },
        "jobDefinitionId": {
          "type": "string"
        }
      }
    },
    "JobDefinitionDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the job definition."
        },
        "processDefinitionId": {
          "type": "string",
          "description": "The id of the process definition this job definition is associated with."
        },
        "processDefinitionKey": {
          "type": "string",
          "description": "The key of the process definition this job definition is associated with."
        },
        "jobType": {
          "type": "string",
          "description": "The type of the job which is running for this job definition. See the User Guide for more information about job types."
        },
        "jobConfiguration": {
          "type": "string",
          "description": "The context of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer context."
        },
        "activityId": {
          "type": "string",
          "description": "The id of the activity this job definition is associated with."
        },
        "suspended": {
          "type": "boolean"
        },
        "overridingJobPriority": {
          "type": "integer",
          "format": "int64",
          "description": "The execution priority defined for jobs that are created based on this definition. May be null when the priority has not been overridden on the job definition level."
        },
        "tenantId": {
          "type": "string",
          "description": "The id of the tenant this job definition is associated with."
        }
      }
    },
    "JobDefinitionQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "JobDefinitionPriorityDto": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "includeJobs": {
          "type": "boolean"
        }
      }
    },
    "JobSuspensionStateDto": {
      "type": "object",
      "properties": {
        "suspended": {
          "type": "boolean"
        },
        "jobId": {
          "type": "string"
        }
      }
    },
    "JobQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "SetJobRetriesDto": {
      "type": "object",
      "properties": {
        "jobIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "jobQuery": {
          "$ref": "#/definitions/JobQueryDto"
        },
        "retries": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JobDuedateDto": {
      "type": "object",
      "properties": {
        "duedate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CorrelationMessageDto": {
      "type": "object",
      "properties": {
        "messageName": {
          "type": "string"
        },
        "businessKey": {
          "type": "string"
        },
        "correlationKeys": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "localCorrelationKeys": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "processVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "withoutTenantId": {
          "type": "boolean"
        },
        "processInstanceId": {
          "type": "string"
        },
        "all": {
          "type": "boolean"
        },
        "resultEnabled": {
          "type": "boolean"
        }
      }
    },
    "MetricsIntervalResultDto": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "reporter": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MetricsResultDto": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/Number"
        }
      }
    },
    "Number": {
      "type": "object"
    },
    "MigrationInstructionDto": {
      "type": "object",
      "properties": {
        "sourceActivityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "targetActivityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updateEventTrigger": {
          "type": "boolean"
        }
      }
    },
    "MigrationPlanDto": {
      "type": "object",
      "properties": {
        "sourceProcessDefinitionId": {
          "type": "string",
          "description": "The id of the source process definition for the migration."
        },
        "targetProcessDefinitionId": {
          "type": "string",
          "description": "The id of the target process definition for the migration."
        },
        "instructions": {
          "type": "array",
          "description": "A list of migration instructions which map equal activities. Each migration instruction is a JSON object with the following properties: Name Value Description sourceActivityIds Array The activity ids from the source process definition being mapped. targetActivityIds Array The activity ids from the target process definition being mapped. updateEventTrigger Boolean Configuration flag whether event triggers defined are going to be updated during migration.",
          "items": {
            "$ref": "#/definitions/MigrationInstructionDto"
          }
        }
      }
    },
    "MigrationPlanGenerationDto": {
      "type": "object",
      "properties": {
        "sourceProcessDefinitionId": {
          "type": "string"
        },
        "targetProcessDefinitionId": {
          "type": "string"
        },
        "updateEventTriggers": {
          "type": "boolean"
        }
      }
    },
    "MigrationExecutionDto": {
      "type": "object",
      "properties": {
        "migrationPlan": {
          "$ref": "#/definitions/MigrationPlanDto"
        },
        "processInstanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processInstanceQuery": {
          "$ref": "#/definitions/ProcessInstanceQueryDto"
        },
        "skipIoMappings": {
          "type": "boolean"
        },
        "skipCustomListeners": {
          "type": "boolean"
        }
      }
    },
    "ProcessInstanceQueryDto": {
      "type": "object",
      "properties": {
        "deploymentId": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "businessKey": {
          "type": "string"
        },
        "businessKeyLike": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "superProcessInstance": {
          "type": "string"
        },
        "subProcessInstance": {
          "type": "string"
        },
        "superCaseInstance": {
          "type": "string"
        },
        "subCaseInstance": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "suspended": {
          "type": "boolean"
        },
        "processInstanceIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "incidentId": {
          "type": "string"
        },
        "incidentType": {
          "type": "string"
        },
        "incidentMessage": {
          "type": "string"
        },
        "incidentMessageLike": {
          "type": "string"
        },
        "withoutTenantId": {
          "type": "boolean"
        },
        "activityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableQueryParameterDto"
          }
        },
        "tenantIdIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "VariableQueryParameterDto": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MigrationInstructionValidationReportDto": {
      "type": "object",
      "properties": {
        "instruction": {
          "$ref": "#/definitions/MigrationInstructionDto"
        },
        "failures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MigrationPlanReportDto": {
      "type": "object",
      "properties": {
        "instructionReports": {
          "type": "array",
          "description": "The list of instruction validation reports. If no validation errors are detected it is an empty list.",
          "items": {
            "$ref": "#/definitions/MigrationInstructionValidationReportDto"
          }
        }
      }
    },
    "CancellationInstructionDto": {
      "allOf": [
        {
          "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "ModificationDto": {
      "type": "object",
      "properties": {
        "instructions": {
          "type": "array",
          "description": "A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: cancel, startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity and cancel instructions request to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity, startAfterActivity, and cancel. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start.",
          "items": {
            "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        },
        "processInstanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processInstanceQuery": {
          "$ref": "#/definitions/ProcessInstanceQueryDto"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "skipIoMappings": {
          "type": "boolean"
        },
        "skipCustomListeners": {
          "type": "boolean"
        }
      }
    },
    "ProcessInstanceModificationInstructionDto": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TriggerVariableValueDto"
          }
        },
        "activityId": {
          "type": "string"
        },
        "transitionId": {
          "type": "string"
        },
        "activityInstanceId": {
          "type": "string"
        },
        "transitionInstanceId": {
          "type": "string"
        },
        "ancestorActivityInstanceId": {
          "type": "string"
        }
      }
    },
    "StartAfterInstructionDto": {
      "allOf": [
        {
          "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "StartBeforeInstructionDto": {
      "allOf": [
        {
          "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "StartTransitionInstructionDto": {
      "allOf": [
        {
          "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "ProcessDefinitionSuspensionStateDto": {
      "type": "object",
      "properties": {
        "suspended": {
          "type": "boolean"
        },
        "processDefinitionId": {
          "type": "string"
        }
      }
    },
    "RestartProcessInstanceDto": {
      "type": "object",
      "properties": {
        "processInstanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instructions": {
          "type": "array",
          "description": "A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity instruction requests to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity and startAfterActivity. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start.",
          "items": {
            "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        },
        "historicProcessInstanceQuery": {
          "$ref": "#/definitions/HistoricProcessInstanceQueryDto"
        },
        "initialVariables": {
          "type": "boolean"
        },
        "skipCustomListeners": {
          "type": "boolean"
        },
        "skipIoMappings": {
          "type": "boolean"
        },
        "withoutBusinessKey": {
          "type": "boolean"
        }
      }
    },
    "ProcessInstanceDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the process instance."
        },
        "definitionId": {
          "type": "string",
          "description": "The id of the process definition."
        },
        "businessKey": {
          "type": "string",
          "description": "The business key of the process instance."
        },
        "caseInstanceId": {
          "type": "string",
          "description": "The case instance id of the process instance."
        },
        "ended": {
          "type": "boolean"
        },
        "suspended": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant id of the process instance."
        }
      }
    },
    "StartProcessInstanceDto": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        },
        "businessKey": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "startInstructions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        },
        "skipCustomListeners": {
          "type": "boolean"
        },
        "skipIoMappings": {
          "type": "boolean"
        },
        "withVariablesInReturn": {
          "type": "boolean"
        }
      }
    },
    "FormDto": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The form key for the process definition."
        },
        "contextPath": {
          "type": "string",
          "description": "The process application's context path the task belongs to. If the task does not belong to a process application deployment or a process definition at all, this property is not set."
        }
      }
    },
    "ActivityStatisticsResultDto": {
      "allOf": [
        {
          "$ref": "#/definitions/StatisticsResultDto"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "IncidentStatisticsResultDto": {
      "type": "object",
      "properties": {
        "incidentType": {
          "type": "string"
        },
        "incidentCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProcessDefinitionStatisticsResultDto": {
      "allOf": [
        {
          "$ref": "#/definitions/StatisticsResultDto"
        },
        {
          "type": "object",
          "properties": {
            "definition": {
              "$ref": "#/definitions/ProcessDefinitionDto"
            }
          }
        }
      ]
    },
    "StatisticsResultDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "instances": {
          "type": "integer",
          "format": "int32"
        },
        "failedJobs": {
          "type": "integer",
          "format": "int32"
        },
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentStatisticsResultDto"
          }
        }
      }
    },
    "ProcessDefinitionDiagramDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the process definition."
        },
        "bpmn20Xml": {
          "type": "string",
          "description": "An escaped XML string containing the XML that this definition was deployed with. Carriage returns, line feeds and quotation marks are escaped."
        }
      }
    },
    "SetJobRetriesByProcessDto": {
      "type": "object",
      "properties": {
        "processInstances": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processInstanceQuery": {
          "$ref": "#/definitions/ProcessInstanceQueryDto"
        },
        "historicProcessInstanceQuery": {
          "$ref": "#/definitions/HistoricProcessInstanceQueryDto"
        },
        "retries": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeleteProcessInstancesDto": {
      "type": "object",
      "properties": {
        "processInstanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processInstanceQuery": {
          "$ref": "#/definitions/ProcessInstanceQueryDto"
        },
        "deleteReason": {
          "type": "string"
        },
        "skipCustomListeners": {
          "type": "boolean"
        },
        "historicProcessInstanceQuery": {
          "$ref": "#/definitions/HistoricProcessInstanceQueryDto"
        }
      }
    },
    "ProcessInstanceSuspensionStateDto": {
      "type": "object",
      "properties": {
        "suspended": {
          "type": "boolean"
        },
        "processInstanceId": {
          "type": "string"
        }
      }
    },
    "ProcessInstanceModificationDto": {
      "type": "object",
      "properties": {
        "skipCustomListeners": {
          "type": "boolean"
        },
        "skipIoMappings": {
          "type": "boolean"
        },
        "instructions": {
          "type": "array",
          "description": "A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: cancel, startBeforeActivity, startAfterActivity, startTransition. A cancel instruction requests cancellation of a single activity instance or all instances of one activity. A startBeforeActivity instruction requests to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity, startAfterActivity, and cancel. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start. activityInstanceId Can be used with instructions of type cancel. Specifies the activity instance to cancel. Valid values are the activity instance IDs supplied by the Get Activity Instance request. transitionInstanceId Can be used with instructions of type cancel. Specifies the transition instance to cancel. Valid values are the transition instance IDs supplied by the Get Activity Instance request. ancestorActivityInstanceId Can be used with instructions of type startBeforeActivity, startAfterActivity, and startTransition. Valid values are the activity instance IDs supplied by the Get Activity Instance request. If there are multiple parent activity instances of the targeted activity, this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated. Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started, this parameter allows to specifiy under which subprocess instance the activity should be started. variables Can be used with instructions of type startBeforeActivity, startAfterActivity, and startTransition. A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.",
          "items": {
            "$ref": "#/definitions/ProcessInstanceModificationInstructionDto"
          }
        }
      }
    },
    "ActivityInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the activity instance."
        },
        "parentActivityInstanceId": {
          "type": "string"
        },
        "activityId": {
          "type": "string",
          "description": "The id of the activity."
        },
        "activityType": {
          "type": "string",
          "description": "The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., 'userTask')."
        },
        "processInstanceId": {
          "type": "string",
          "description": "The id of the process instance this activity instance is part of."
        },
        "processDefinitionId": {
          "type": "string",
          "description": "The id of the process definition."
        },
        "childActivityInstances": {
          "type": "array",
          "description": "A list of child activity instances.",
          "items": {
            "$ref": "#/definitions/ActivityInstanceDto"
          }
        },
        "childTransitionInstances": {
          "type": "array",
          "description": "A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation.",
          "items": {
            "$ref": "#/definitions/TransitionInstanceDto"
          }
        },
        "executionIds": {
          "type": "array",
          "description": "A list of execution ids.",
          "items": {
            "type": "string"
          }
        },
        "activityName": {
          "type": "string",
          "description": "The name of the activity."
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TransitionInstanceDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "parentActivityInstanceId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "processDefinitionId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityName": {
          "type": "string"
        },
        "activityType": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "targetActivityId": {
          "type": "string"
        }
      }
    },
    "IdentityLinkDto": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "UserIdDto": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "TaskDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the task."
        },
        "name": {
          "type": "string",
          "description": "The task name."
        },
        "assignee": {
          "type": "string",
          "description": "The user to assign to this task."
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "due": {
          "type": "string",
          "format": "date-time",
          "description": "The due date for the task. Format yyyy-MM-dd'T'HH:mm:ss."
        },
        "followUp": {
          "type": "string",
          "format": "date-time",
          "description": "The follow-up date for the task. Format yyyy-MM-dd'T'HH:mm:ss."
        },
        "delegationState": {
          "type": "string",
          "description": "The delegation state of the task. Corresponds to the DelegationState enum in the engine. Possible values are RESOLVED and PENDING."
        },
        "description": {
          "type": "string",
          "description": "The task description."
        },
        "executionId": {
          "type": "string"
        },
        "owner": {
          "type": "string",
          "description": "The owner of the task."
        },
        "parentTaskId": {
          "type": "string",
          "description": "The id of the parent task, if this task is a subtask."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority of the task."
        },
        "processDefinitionId": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "taskDefinitionKey": {
          "type": "string"
        },
        "caseExecutionId": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string",
          "description": "The id of the case instance the task belongs to."
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "suspended": {
          "type": "boolean"
        },
        "formKey": {
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "The id of the tenant the task belongs to."
        }
      }
    },
    "AttachmentDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the task attachment."
        },
        "name": {
          "type": "string",
          "description": "The name of the task attachment."
        },
        "description": {
          "type": "string",
          "description": "The description of the task attachment."
        },
        "taskId": {
          "type": "string",
          "description": "The id of the task to which the attachment belongs."
        },
        "type": {
          "type": "string",
          "description": "Indication of the type of content that this attachment refers to. Can be MIME type or any other indication."
        },
        "url": {
          "type": "string",
          "description": "The url to the remote content of the task attachment."
        }
      }
    },
    "CommentDto": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomLink"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the task comment."
        },
        "userId": {
          "type": "string",
          "description": "The id of the user who created the comment."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the comment was created."
        },
        "taskId": {
          "type": "string",
          "description": "The id of the task to which the comment belongs."
        },
        "message": {
          "type": "string",
          "description": "The content of the comment."
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "CompleteTaskDto": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValueDto"
          }
        }
      }
    },
    "TaskQueryDto": {
      "type": "object",
      "properties": {
        "processInstanceBusinessKey": {
          "type": "string"
        },
        "processInstanceBusinessKeyIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processInstanceBusinessKeyLike": {
          "type": "string"
        },
        "processDefinitionKey": {
          "type": "string"
        },
        "processDefinitionKeyIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processDefinitionId": {
          "type": "string"
        },
        "executionId": {
          "type": "string"
        },
        "activityInstanceIdIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processDefinitionName": {
          "type": "string"
        },
        "processDefinitionNameLike": {
          "type": "string"
        },
        "processInstanceId": {
          "type": "string"
        },
        "assignee": {
          "type": "string"
        },
        "assigneeExpression": {
          "type": "string"
        },
        "assigneeLike": {
          "type": "string"
        },
        "assigneeLikeExpression": {
          "type": "string"
        },
        "candidateGroup": {
          "type": "string"
        },
        "candidateGroupExpression": {
          "type": "string"
        },
        "candidateUser": {
          "type": "string"
        },
        "candidateUserExpression": {
          "type": "string"
        },
        "includeAssignedTasks": {
          "type": "boolean"
        },
        "taskDefinitionKey": {
          "type": "string"
        },
        "taskDefinitionKeyIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taskDefinitionKeyLike": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionLike": {
          "type": "string"
        },
        "involvedUser": {
          "type": "string"
        },
        "involvedUserExpression": {
          "type": "string"
        },
        "maxPriority": {
          "type": "integer",
          "format": "int32"
        },
        "minPriority": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nameNotEqual": {
          "type": "string"
        },
        "nameLike": {
          "type": "string"
        },
        "nameNotLike": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "ownerExpression": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "parentTaskId": {
          "type": "string"
        },
        "unassigned": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "suspended": {
          "type": "boolean"
        },
        "caseDefinitionKey": {
          "type": "string"
        },
        "caseDefinitionId": {
          "type": "string"
        },
        "caseDefinitionName": {
          "type": "string"
        },
        "caseDefinitionNameLike": {
          "type": "string"
        },
        "caseInstanceId": {
          "type": "string"
        },
        "caseInstanceBusinessKey": {
          "type": "string"
        },
        "caseInstanceBusinessKeyLike": {
          "type": "string"
        },
        "caseExecutionId": {
          "type": "string"
        },
        "dueAfter": {
          "type": "string",
          "format": "date-time"
        },
        "dueAfterExpression": {
          "type": "string"
        },
        "dueBefore": {
          "type": "string",
          "format": "date-time"
        },
        "dueBeforeExpression": {
          "type": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "dueDateExpression": {
          "type": "string"
        },
        "followUpAfter": {
          "type": "string",
          "format": "date-time"
        },
        "followUpAfterExpression": {
          "type": "string"
        },
        "followUpBefore": {
          "type": "string",
          "format": "date-time"
        },
        "followUpBeforeExpression": {
          "type": "string"
        },
        "followUpBeforeOrNotExistent": {
          "type": "string",
          "format": "date-time"
        },
        "followUpBeforeOrNotExistentExpression": {
          "type": "string"
        },
        "followUpDate": {
          "type": "string",
          "format": "date-time"
        },
        "followUpDateExpression": {
          "type": "string"
        },
        "createdAfter": {
          "type": "string",
          "format": "date-time"
        },
        "createdAfterExpression": {
          "type": "string"
        },
        "createdBefore": {
          "type": "string",
          "format": "date-time"
        },
        "createdBeforeExpression": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdOnExpression": {
          "type": "string"
        },
        "delegationState": {
          "type": "string"
        },
        "tenantIdIn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "withoutTenantId": {
          "type": "boolean"
        },
        "candidateGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "candidateGroupsExpression": {
          "type": "string"
        },
        "taskVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableQueryParameterDto"
          }
        },
        "processVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableQueryParameterDto"
          }
        },
        "caseInstanceVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableQueryParameterDto"
          }
        },
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    },
    "TenantDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the tenant."
        },
        "name": {
          "type": "string",
          "description": "The name of the tenant."
        }
      }
    },
    "UserProfileDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the user."
        },
        "firstName": {
          "type": "string",
          "description": "The firstname of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The lastname of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        }
      }
    },
    "UserCredentialsDto": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "The user's new password."
        },
        "authenticatedUserPassword": {
          "type": "string",
          "description": "The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter)."
        }
      }
    },
    "VariableInstanceDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "valueInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "string",
          "description": "The id of the variable instance."
        },
        "name": {
          "type": "string",
          "description": "The name of the variable instance."
        },
        "processInstanceId": {
          "type": "string",
          "description": "The id of the process instance that this variable instance belongs to."
        },
        "executionId": {
          "type": "string",
          "description": "The id of the execution that this variable instance belongs to."
        },
        "caseInstanceId": {
          "type": "string",
          "description": "The id of the case instance that this variable instance belongs to."
        },
        "caseExecutionId": {
          "type": "string",
          "description": "The id of the case execution that this variable instance belongs to."
        },
        "taskId": {
          "type": "string",
          "description": "The id of the task that this variable instance belongs to."
        },
        "activityInstanceId": {
          "type": "string",
          "description": "The id of the activity instance that this variable instance belongs to."
        },
        "errorMessage": {
          "type": "string",
          "description": "An error message in case a Java Serialized Object could not be de-serialized."
        },
        "tenantId": {
          "type": "string",
          "description": "The id of the tenant that this variable instance belongs to."
        }
      }
    },
    "VariableInstanceQueryDto": {
      "type": "object",
      "properties": {
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortingDto"
          }
        }
      }
    }
  }
}
